// sequence-wallet v0.1.0 6ea46876e4e93326c37d052b3ee77bc70b33555c
// --
// Code generated by webrpc-gen@v0.20.3 with golang generator. DO NOT EDIT.
//
// webrpc-gen -schema=wallet.ridl -target=golang -pkg=proto_wallet -server -client -out=./wallet.gen.go
package proto_wallet

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/0xsequence/go-sequence/lib/prototyp"
)

// WebRPC description and code-gen version
func WebRPCVersion() string {
	return "v1"
}

// Schema version of your RIDL schema
func WebRPCSchemaVersion() string {
	return "v0.1.0"
}

// Schema hash generated from your RIDL schema
func WebRPCSchemaHash() string {
	return "6ea46876e4e93326c37d052b3ee77bc70b33555c"
}

//
// Common types
//

type IntentName string

const (
	IntentName_initiateAuth          IntentName = "initiateAuth"
	IntentName_openSession           IntentName = "openSession"
	IntentName_closeSession          IntentName = "closeSession"
	IntentName_validateSession       IntentName = "validateSession"
	IntentName_finishValidateSession IntentName = "finishValidateSession"
	IntentName_listSessions          IntentName = "listSessions"
	IntentName_getSession            IntentName = "getSession"
	IntentName_sessionAuthProof      IntentName = "sessionAuthProof"
	IntentName_feeOptions            IntentName = "feeOptions"
	IntentName_signMessage           IntentName = "signMessage"
	IntentName_signTypedData         IntentName = "signTypedData"
	IntentName_sendTransaction       IntentName = "sendTransaction"
	IntentName_getTransactionReceipt IntentName = "getTransactionReceipt"
	IntentName_federateAccount       IntentName = "federateAccount"
	IntentName_removeAccount         IntentName = "removeAccount"
	IntentName_listAccounts          IntentName = "listAccounts"
	IntentName_getIdToken            IntentName = "getIdToken"
	IntentName_adoptChildWallet      IntentName = "adoptChildWallet"
	IntentName_getAdopter            IntentName = "getAdopter"
	IntentName_confirmIntent         IntentName = "confirmIntent"
	IntentName_getConfirmationStatus IntentName = "getConfirmationStatus"
)

func (x IntentName) MarshalText() ([]byte, error) {
	return []byte(x), nil
}

func (x *IntentName) UnmarshalText(b []byte) error {
	*x = IntentName(string(b))
	return nil
}

func (x *IntentName) Is(values ...IntentName) bool {
	if x == nil {
		return false
	}
	for _, v := range values {
		if *x == v {
			return true
		}
	}
	return false
}

type IntentResponseCode string

const (
	IntentResponseCode_authInitiated        IntentResponseCode = "authInitiated"
	IntentResponseCode_sessionOpened        IntentResponseCode = "sessionOpened"
	IntentResponseCode_sessionClosed        IntentResponseCode = "sessionClosed"
	IntentResponseCode_sessionList          IntentResponseCode = "sessionList"
	IntentResponseCode_validationRequired   IntentResponseCode = "validationRequired"
	IntentResponseCode_validationStarted    IntentResponseCode = "validationStarted"
	IntentResponseCode_validationFinished   IntentResponseCode = "validationFinished"
	IntentResponseCode_sessionAuthProof     IntentResponseCode = "sessionAuthProof"
	IntentResponseCode_signedMessage        IntentResponseCode = "signedMessage"
	IntentResponseCode_signedTypedData      IntentResponseCode = "signedTypedData"
	IntentResponseCode_feeOptions           IntentResponseCode = "feeOptions"
	IntentResponseCode_transactionReceipt   IntentResponseCode = "transactionReceipt"
	IntentResponseCode_transactionFailed    IntentResponseCode = "transactionFailed"
	IntentResponseCode_getSessionResponse   IntentResponseCode = "getSessionResponse"
	IntentResponseCode_accountList          IntentResponseCode = "accountList"
	IntentResponseCode_accountFederated     IntentResponseCode = "accountFederated"
	IntentResponseCode_accountRemoved       IntentResponseCode = "accountRemoved"
	IntentResponseCode_idToken              IntentResponseCode = "idToken"
	IntentResponseCode_adopter              IntentResponseCode = "adopter"
	IntentResponseCode_childWalletAdopted   IntentResponseCode = "childWalletAdopted"
	IntentResponseCode_confirmationRequired IntentResponseCode = "confirmationRequired"
)

func (x IntentResponseCode) MarshalText() ([]byte, error) {
	return []byte(x), nil
}

func (x *IntentResponseCode) UnmarshalText(b []byte) error {
	*x = IntentResponseCode(string(b))
	return nil
}

func (x *IntentResponseCode) Is(values ...IntentResponseCode) bool {
	if x == nil {
		return false
	}
	for _, v := range values {
		if *x == v {
			return true
		}
	}
	return false
}

type Intent struct {
	Version    string       `json:"version"`
	Name       IntentName   `json:"name"`
	ExpiresAt  uint64       `json:"expiresAt"`
	IssuedAt   uint64       `json:"issuedAt"`
	Data       interface{}  `json:"data"`
	Signatures []*Signature `json:"signatures,omitempty"`
}

type Signature struct {
	SessionID string `json:"sessionId"`
	Signature string `json:"signature"`
}

type IntentResponse struct {
	Code IntentResponseCode `json:"code"`
	Data interface{}        `json:"data"`
}

type WalletDeploymentState string

const (
	WalletDeploymentState_UNKNOWN  WalletDeploymentState = "UNKNOWN"
	WalletDeploymentState_MISSING  WalletDeploymentState = "MISSING"
	WalletDeploymentState_DEPLOYED WalletDeploymentState = "DEPLOYED"
)

func (x WalletDeploymentState) MarshalText() ([]byte, error) {
	return []byte(x), nil
}

func (x *WalletDeploymentState) UnmarshalText(b []byte) error {
	*x = WalletDeploymentState(string(b))
	return nil
}

func (x *WalletDeploymentState) Is(values ...WalletDeploymentState) bool {
	if x == nil {
		return false
	}
	for _, v := range values {
		if *x == v {
			return true
		}
	}
	return false
}

type SortOrder uint32

const (
	SortOrder_DESC SortOrder = 0
	SortOrder_ASC  SortOrder = 1
)

var SortOrder_name = map[uint32]string{
	0: "DESC",
	1: "ASC",
}

var SortOrder_value = map[string]uint32{
	"DESC": 0,
	"ASC":  1,
}

func (x SortOrder) String() string {
	return SortOrder_name[uint32(x)]
}

func (x SortOrder) MarshalText() ([]byte, error) {
	return []byte(SortOrder_name[uint32(x)]), nil
}

func (x *SortOrder) UnmarshalText(b []byte) error {
	*x = SortOrder(SortOrder_value[string(b)])
	return nil
}

func (x *SortOrder) Is(values ...SortOrder) bool {
	if x == nil {
		return false
	}
	for _, v := range values {
		if *x == v {
			return true
		}
	}
	return false
}

// Project represents a project that can be used to configure the wallet as a service.
type Project struct {
	Id        uint64        `json:"id" db:"id,omitempty"`
	Name      string        `json:"name" db:"name"`
	JwtAlg    string        `json:"jwtAlg" db:"jwt_alg"`
	JwtSecret *string       `json:"jwtSecret" db:"jwt_secret"`
	JwtPublic *string       `json:"jwtPublic" db:"jwt_public"`
	UserSalt  prototyp.Hash `json:"user_salt" db:"user_salt"`
	Salt      prototyp.Hash `json:"-" db:"salt"`
	UpdatedAt *time.Time    `json:"updatedAt,omitempty" db:"updated_at,omitempty"`
	CreatedAt *time.Time    `json:"createdAt,omitempty" db:"created_at,omitempty"`
}

// ProjectWallet is an wallet that can be used by a project. The wallet
// can be used to sign transactions and messages.
type ProjectWallet struct {
	Id               uint64             `json:"id" db:"id,omitempty"`
	ProjectID        uint64             `json:"projectID" db:"project_id"`
	WalletIndex      uint64             `json:"walletIndex" db:"wallet_index"`
	WalletAddress    prototyp.Hash      `json:"walletAddress" db:"wallet_address"`
	UserID           string             `json:"userId" db:"user_id"`
	Adopter          prototyp.HashMaybe `json:"adopter" db:"adopter"`
	ConfigCheckpoint uint32             `json:"configCheckpoint" db:"config_checkpoint"`
	UpdatedAt        *time.Time         `json:"updatedAt,omitempty" db:"updated_at,omitempty"`
	CreatedAt        *time.Time         `json:"createdAt,omitempty" db:"created_at,omitempty"`
}

// ProjectWalletConfig is a configuration for a project wallet. The configuration
// can be used to configure the wallet for a project.
type ProjectWalletConfig struct {
	Id        uint64        `json:"id" db:"id,omitempty"`
	ProjectID uint64        `json:"projectID" db:"project_id"`
	Address   prototyp.Hash `json:"address" db:"address"`
	Config    string        `json:"config" db:"config"`
	UpdatedAt *time.Time    `json:"updatedAt,omitempty" db:"updated_at,omitempty"`
	CreatedAt *time.Time    `json:"createdAt,omitempty" db:"created_at,omitempty"`
}

type Transaction struct {
	To            string `json:"to"`
	Value         string `json:"value"`
	GasLimit      string `json:"gasLimit"`
	Data          string `json:"data"`
	DelegateCall  bool   `json:"delegateCall"`
	RevertOnError bool   `json:"revertOnError"`
}

type TransactionBundle struct {
	ChainID      string         `json:"chainID"`
	Nonce        string         `json:"nonce"`
	Transactions []*Transaction `json:"transactions"`
}

type SignMessage struct {
	ChainID string `json:"chainID"`
	Message string `json:"message"`
}

type SignTypedData struct {
	ChainID   string      `json:"chainID"`
	TypedData interface{} `json:"typedData"`
}

type ParentWalletStatus struct {
	ChainID  string                `json:"chainID"`
	Address  string                `json:"address"`
	Deployed bool                  `json:"deployed"`
	State    WalletDeploymentState `json:"state"`
	Error    *string               `json:"error"`
}

// Chain represents a blockchain network.
type Chain struct {
	Id   uint64 `json:"id"`
	Name string `json:"name"`
}

// Page represents a results page. This can be used both to request a page and
// to store the state of a page.
type Page struct {
	// Common for both numbered pages and cursor: Number of items per page
	// TODO: REMOVE..
	PageSize *uint32 `json:"pageSize"`
	// Numbered pages: Page number, this is multiplied by the value of the <pageSize> parameter.
	// TODO: REMOVE..
	Page *uint32 `json:"page"`
	// Number of total items on this query.
	// TODO: REMOVE..
	TotalRecords *uint64 `json:"totalRecords"`
	// Cursor: column to compare before/after to
	Column *string `json:"column"`
	// Cursor: return column < before - include to get previous page
	Before *interface{} `json:"before"`
	// Cursor: return column > after - include to get next page
	After *interface{} `json:"after"`
	// Sorting filter
	Sort []*SortBy `json:"sort"`
}

type SortBy struct {
	Column string    `json:"column"`
	Order  SortOrder `json:"order"`
}

type ProvidedSignature struct {
	Signature string `json:"Signature"`
	Digest    string `json:"Digest"`
	Address   string `json:"Address"`
}

type ProjectWalletPreConfig struct {
	ProjectRecoveryAddress string                      `json:"projectRecoveryAddress"`
	UserMapRules           *ProjectSessionUserMapRules `json:"userMapRules"`
}

type ProjectSessionUserMapRules struct {
	AllowIdTokens                     bool   `json:"allowIdTokens" db:"allow_id_tokens"`
	AllowEmails                       bool   `json:"allowEmails" db:"allow_emails"`
	AllowPhones                       bool   `json:"allowPhones" db:"allow_phones"`
	UserIdTemplate                    string `json:"userIdTemplate" db:"user_id_template"`
	IdTokenTrustedAuthenticatorIssuer string `json:"idTokenTrustedAuthenticatorIssuer" db:"id_token_trusted_authenticator_issuer"`
}

type SessionAuthProof struct {
	Wallet     string               `json:"wallet"`
	Message    *SignMessage         `json:"message"`
	Signatures []*ProvidedSignature `json:"signatures"`
}

type MiniSequenceContext struct {
	Factory    string `json:"factory"`
	MainModule string `json:"mainModule"`
}

var (
	methods = map[string]method{
		"/rpc/WaaS/CreateProject": {
			Name:        "CreateProject",
			Service:     "WaaS",
			Annotations: map[string]string{},
		},
		"/rpc/WaaS/DeployProjectParentWallet": {
			Name:        "DeployProjectParentWallet",
			Service:     "WaaS",
			Annotations: map[string]string{},
		},
		"/rpc/WaaS/UpdateProjectUserMapRules": {
			Name:        "UpdateProjectUserMapRules",
			Service:     "WaaS",
			Annotations: map[string]string{},
		},
		"/rpc/WaaS/ProjectParentConfig": {
			Name:        "ProjectParentConfig",
			Service:     "WaaS",
			Annotations: map[string]string{},
		},
		"/rpc/WaaS/ProjectParentWallet": {
			Name:        "ProjectParentWallet",
			Service:     "WaaS",
			Annotations: map[string]string{},
		},
		"/rpc/WaaS/ProjectParentWalletStatus": {
			Name:        "ProjectParentWalletStatus",
			Service:     "WaaS",
			Annotations: map[string]string{},
		},
		"/rpc/WaaS/ProjectWallets": {
			Name:        "ProjectWallets",
			Service:     "WaaS",
			Annotations: map[string]string{},
		},
		"/rpc/WaaS/ProjectUserSalt": {
			Name:        "ProjectUserSalt",
			Service:     "WaaS",
			Annotations: map[string]string{},
		},
		"/rpc/WaaS/GetProjectParentWalletDeployCalldata": {
			Name:        "GetProjectParentWalletDeployCalldata",
			Service:     "WaaS",
			Annotations: map[string]string{},
		},
		"/rpc/WaaS/ProjectWallet": {
			Name:        "ProjectWallet",
			Service:     "WaaS",
			Annotations: map[string]string{},
		},
		"/rpc/WaaS/SequenceContext": {
			Name:        "SequenceContext",
			Service:     "WaaS",
			Annotations: map[string]string{},
		},
		"/rpc/WaaS/UserSalt": {
			Name:        "UserSalt",
			Service:     "WaaS",
			Annotations: map[string]string{},
		},
		"/rpc/WaaS/UseHotWallet": {
			Name:        "UseHotWallet",
			Service:     "WaaS",
			Annotations: map[string]string{},
		},
		"/rpc/WaaS/Wallets": {
			Name:        "Wallets",
			Service:     "WaaS",
			Annotations: map[string]string{},
		},
		"/rpc/WaaS/GenTransaction": {
			Name:        "GenTransaction",
			Service:     "WaaS",
			Annotations: map[string]string{},
		},
		"/rpc/WaaS/SendTransaction": {
			Name:        "SendTransaction",
			Service:     "WaaS",
			Annotations: map[string]string{},
		},
		"/rpc/WaaS/SignMessage": {
			Name:        "SignMessage",
			Service:     "WaaS",
			Annotations: map[string]string{},
		},
		"/rpc/WaaS/SignTypedData": {
			Name:        "SignTypedData",
			Service:     "WaaS",
			Annotations: map[string]string{},
		},
		"/rpc/WaaS/GetSession": {
			Name:        "GetSession",
			Service:     "WaaS",
			Annotations: map[string]string{},
		},
		"/rpc/WaaS/RegisterSession": {
			Name:        "RegisterSession",
			Service:     "WaaS",
			Annotations: map[string]string{},
		},
		"/rpc/WaaS/StartSessionValidation": {
			Name:        "StartSessionValidation",
			Service:     "WaaS",
			Annotations: map[string]string{},
		},
		"/rpc/WaaS/FinishValidateSession": {
			Name:        "FinishValidateSession",
			Service:     "WaaS",
			Annotations: map[string]string{},
		},
		"/rpc/WaaS/InvalidateSession": {
			Name:        "InvalidateSession",
			Service:     "WaaS",
			Annotations: map[string]string{},
		},
		"/rpc/WaaS/SessionAuthProof": {
			Name:        "SessionAuthProof",
			Service:     "WaaS",
			Annotations: map[string]string{},
		},
		"/rpc/WaaS/FederateAccount": {
			Name:        "FederateAccount",
			Service:     "WaaS",
			Annotations: map[string]string{},
		},
		"/rpc/WaaS/RemoveAccount": {
			Name:        "RemoveAccount",
			Service:     "WaaS",
			Annotations: map[string]string{},
		},
		"/rpc/WaaS/InitiateAuth": {
			Name:        "InitiateAuth",
			Service:     "WaaS",
			Annotations: map[string]string{},
		},
		"/rpc/WaaS/AdoptChildWallet": {
			Name:        "AdoptChildWallet",
			Service:     "WaaS",
			Annotations: map[string]string{},
		},
		"/rpc/WaaS/InitiateEmailAuth": {
			Name:        "InitiateEmailAuth",
			Service:     "WaaS",
			Annotations: map[string]string{},
		},
		"/rpc/WaaS/SendIntent": {
			Name:        "SendIntent",
			Service:     "WaaS",
			Annotations: map[string]string{},
		},
		"/rpc/WaaS/ChainList": {
			Name:        "ChainList",
			Service:     "WaaS",
			Annotations: map[string]string{},
		},
	}
)

var WebRPCServices = map[string][]string{
	"WaaS": {
		"CreateProject",
		"DeployProjectParentWallet",
		"UpdateProjectUserMapRules",
		"ProjectParentConfig",
		"ProjectParentWallet",
		"ProjectParentWalletStatus",
		"ProjectWallets",
		"ProjectUserSalt",
		"GetProjectParentWalletDeployCalldata",
		"ProjectWallet",
		"SequenceContext",
		"UserSalt",
		"UseHotWallet",
		"Wallets",
		"GenTransaction",
		"SendTransaction",
		"SignMessage",
		"SignTypedData",
		"GetSession",
		"RegisterSession",
		"StartSessionValidation",
		"FinishValidateSession",
		"InvalidateSession",
		"SessionAuthProof",
		"FederateAccount",
		"RemoveAccount",
		"InitiateAuth",
		"AdoptChildWallet",
		"InitiateEmailAuth",
		"SendIntent",
		"ChainList",
	},
}

//
// Server types
//

type WaaS interface {
	//
	// system-admin methods
	//
	CreateProject(ctx context.Context, projectID uint64, name string, config *ProjectWalletPreConfig, jwtAlg string, jwtSecret *string, jwtPublic *string) (*Project, error)
	DeployProjectParentWallet(ctx context.Context, projectID uint64, chainID string) (string, string, error)
	UpdateProjectUserMapRules(ctx context.Context, projectID uint64, userMapRules *ProjectSessionUserMapRules) error
	ProjectParentConfig(ctx context.Context, projectID uint64) (string, error)
	ProjectParentWallet(ctx context.Context, projectID uint64) (string, error)
	ProjectParentWalletStatus(ctx context.Context, projectID uint64) ([]*ParentWalletStatus, error)
	ProjectWallets(ctx context.Context, projectID uint64, page *Page) ([]*ProjectWallet, *Page, error)
	// NOTICE: This is NOT the salt used for the guard
	// this salt is used to deterministically being able to compute the relationship
	// userId <-> wallet, that way the API can't map users to the wrong wallet
	ProjectUserSalt(ctx context.Context, projectID uint64) (string, error)
	// similar method to DeployProjectParentWallet, but allows anyone to call it to get
	// the transaction calldata to do a parent wallet deployment manually.
	GetProjectParentWalletDeployCalldata(ctx context.Context, projectID uint64, chainID string) (string, string, string, error)
	// these methods are used by the dss during setup, they reduce the
	// amount of configuration that needs to be manually passed around
	ProjectWallet(ctx context.Context) (string, error)
	SequenceContext(ctx context.Context) (*MiniSequenceContext, error)
	UserSalt(ctx context.Context) (string, error)
	UseHotWallet(ctx context.Context, walletAddress string) (bool, error)
	// wallet rpc caller
	Wallets(ctx context.Context, page *Page) ([]*ProjectWallet, *Page, error)
	// wallet rpc using sdk
	GenTransaction(ctx context.Context, intent *Intent) (*TransactionBundle, error)
	SendTransaction(ctx context.Context, intent *Intent, result *TransactionBundle, signatures []*ProvidedSignature) (*IntentResponse, error)
	SignMessage(ctx context.Context, intent *Intent, message *SignMessage, signatures []*ProvidedSignature) (*IntentResponse, error)
	SignTypedData(ctx context.Context, intent *Intent, message *SignTypedData, signatures []*ProvidedSignature) (*IntentResponse, error)
	GetSession(ctx context.Context, sessionId string) (*IntentResponse, error)
	RegisterSession(ctx context.Context, userID string, intent *Intent) (*IntentResponse, error)
	StartSessionValidation(ctx context.Context, walletAddress string, sessionId string, deviceMetadata string) (*IntentResponse, error)
	FinishValidateSession(ctx context.Context, sessionId string, salt string, challenge string) (*IntentResponse, error)
	InvalidateSession(ctx context.Context, sessionId string) (bool, error)
	SessionAuthProof(ctx context.Context, intent *Intent, proof *SessionAuthProof) (*IntentResponse, error)
	FederateAccount(ctx context.Context, userID string, intent *Intent) (*IntentResponse, error)
	RemoveAccount(ctx context.Context, intent *Intent) (*IntentResponse, error)
	InitiateAuth(ctx context.Context, intent *Intent, answer string, challenge string) (*IntentResponse, error)
	AdoptChildWallet(ctx context.Context, intent *Intent, checkpoint uint32, signatures []*ProvidedSignature) (*IntentResponse, error)
	// TODO: deprecated; remove once it's not used by waas-auth anymore
	InitiateEmailAuth(ctx context.Context, intent *Intent, answerHash string, salt string) (*IntentResponse, error)
	// Generic send intent method
	SendIntent(ctx context.Context, intent *Intent) (*IntentResponse, error)
	// utilities
	ChainList(ctx context.Context) ([]*Chain, error)
}

//
// Client types
//

type WaaSClient interface {
	//
	// system-admin methods
	//
	CreateProject(ctx context.Context, projectID uint64, name string, config *ProjectWalletPreConfig, jwtAlg string, jwtSecret *string, jwtPublic *string) (*Project, error)
	DeployProjectParentWallet(ctx context.Context, projectID uint64, chainID string) (string, string, error)
	UpdateProjectUserMapRules(ctx context.Context, projectID uint64, userMapRules *ProjectSessionUserMapRules) error
	ProjectParentConfig(ctx context.Context, projectID uint64) (string, error)
	ProjectParentWallet(ctx context.Context, projectID uint64) (string, error)
	ProjectParentWalletStatus(ctx context.Context, projectID uint64) ([]*ParentWalletStatus, error)
	ProjectWallets(ctx context.Context, projectID uint64, page *Page) ([]*ProjectWallet, *Page, error)
	// NOTICE: This is NOT the salt used for the guard
	// this salt is used to deterministically being able to compute the relationship
	// userId <-> wallet, that way the API can't map users to the wrong wallet
	ProjectUserSalt(ctx context.Context, projectID uint64) (string, error)
	// similar method to DeployProjectParentWallet, but allows anyone to call it to get
	// the transaction calldata to do a parent wallet deployment manually.
	GetProjectParentWalletDeployCalldata(ctx context.Context, projectID uint64, chainID string) (string, string, string, error)
	// these methods are used by the dss during setup, they reduce the
	// amount of configuration that needs to be manually passed around
	ProjectWallet(ctx context.Context) (string, error)
	SequenceContext(ctx context.Context) (*MiniSequenceContext, error)
	UserSalt(ctx context.Context) (string, error)
	UseHotWallet(ctx context.Context, walletAddress string) (bool, error)
	// wallet rpc caller
	Wallets(ctx context.Context, page *Page) ([]*ProjectWallet, *Page, error)
	// wallet rpc using sdk
	GenTransaction(ctx context.Context, intent *Intent) (*TransactionBundle, error)
	SendTransaction(ctx context.Context, intent *Intent, result *TransactionBundle, signatures []*ProvidedSignature) (*IntentResponse, error)
	SignMessage(ctx context.Context, intent *Intent, message *SignMessage, signatures []*ProvidedSignature) (*IntentResponse, error)
	SignTypedData(ctx context.Context, intent *Intent, message *SignTypedData, signatures []*ProvidedSignature) (*IntentResponse, error)
	GetSession(ctx context.Context, sessionId string) (*IntentResponse, error)
	RegisterSession(ctx context.Context, userID string, intent *Intent) (*IntentResponse, error)
	StartSessionValidation(ctx context.Context, walletAddress string, sessionId string, deviceMetadata string) (*IntentResponse, error)
	FinishValidateSession(ctx context.Context, sessionId string, salt string, challenge string) (*IntentResponse, error)
	InvalidateSession(ctx context.Context, sessionId string) (bool, error)
	SessionAuthProof(ctx context.Context, intent *Intent, proof *SessionAuthProof) (*IntentResponse, error)
	FederateAccount(ctx context.Context, userID string, intent *Intent) (*IntentResponse, error)
	RemoveAccount(ctx context.Context, intent *Intent) (*IntentResponse, error)
	InitiateAuth(ctx context.Context, intent *Intent, answer string, challenge string) (*IntentResponse, error)
	AdoptChildWallet(ctx context.Context, intent *Intent, checkpoint uint32, signatures []*ProvidedSignature) (*IntentResponse, error)
	// TODO: deprecated; remove once it's not used by waas-auth anymore
	InitiateEmailAuth(ctx context.Context, intent *Intent, answerHash string, salt string) (*IntentResponse, error)
	// Generic send intent method
	SendIntent(ctx context.Context, intent *Intent) (*IntentResponse, error)
	// utilities
	ChainList(ctx context.Context) ([]*Chain, error)
}

//
// Server
//

type WebRPCServer interface {
	http.Handler
}

type waaSServer struct {
	WaaS
	OnError   func(r *http.Request, rpcErr *WebRPCError)
	OnRequest func(w http.ResponseWriter, r *http.Request) error
}

func NewWaaSServer(svc WaaS) *waaSServer {
	return &waaSServer{
		WaaS: svc,
	}
}

func (s *waaSServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	defer func() {
		// In case of a panic, serve a HTTP 500 error and then panic.
		if rr := recover(); rr != nil {
			s.sendErrorJSON(w, r, ErrWebrpcServerPanic.WithCause(fmt.Errorf("%v", rr)))
			panic(rr)
		}
	}()

	ctx := r.Context()
	ctx = context.WithValue(ctx, HTTPResponseWriterCtxKey, w)
	ctx = context.WithValue(ctx, HTTPRequestCtxKey, r)
	ctx = context.WithValue(ctx, ServiceNameCtxKey, "WaaS")

	r = r.WithContext(ctx)

	var handler func(ctx context.Context, w http.ResponseWriter, r *http.Request)
	switch r.URL.Path {
	case "/rpc/WaaS/CreateProject":
		handler = s.serveCreateProjectJSON
	case "/rpc/WaaS/DeployProjectParentWallet":
		handler = s.serveDeployProjectParentWalletJSON
	case "/rpc/WaaS/UpdateProjectUserMapRules":
		handler = s.serveUpdateProjectUserMapRulesJSON
	case "/rpc/WaaS/ProjectParentConfig":
		handler = s.serveProjectParentConfigJSON
	case "/rpc/WaaS/ProjectParentWallet":
		handler = s.serveProjectParentWalletJSON
	case "/rpc/WaaS/ProjectParentWalletStatus":
		handler = s.serveProjectParentWalletStatusJSON
	case "/rpc/WaaS/ProjectWallets":
		handler = s.serveProjectWalletsJSON
	case "/rpc/WaaS/ProjectUserSalt":
		handler = s.serveProjectUserSaltJSON
	case "/rpc/WaaS/GetProjectParentWalletDeployCalldata":
		handler = s.serveGetProjectParentWalletDeployCalldataJSON
	case "/rpc/WaaS/ProjectWallet":
		handler = s.serveProjectWalletJSON
	case "/rpc/WaaS/SequenceContext":
		handler = s.serveSequenceContextJSON
	case "/rpc/WaaS/UserSalt":
		handler = s.serveUserSaltJSON
	case "/rpc/WaaS/UseHotWallet":
		handler = s.serveUseHotWalletJSON
	case "/rpc/WaaS/Wallets":
		handler = s.serveWalletsJSON
	case "/rpc/WaaS/GenTransaction":
		handler = s.serveGenTransactionJSON
	case "/rpc/WaaS/SendTransaction":
		handler = s.serveSendTransactionJSON
	case "/rpc/WaaS/SignMessage":
		handler = s.serveSignMessageJSON
	case "/rpc/WaaS/SignTypedData":
		handler = s.serveSignTypedDataJSON
	case "/rpc/WaaS/GetSession":
		handler = s.serveGetSessionJSON
	case "/rpc/WaaS/RegisterSession":
		handler = s.serveRegisterSessionJSON
	case "/rpc/WaaS/StartSessionValidation":
		handler = s.serveStartSessionValidationJSON
	case "/rpc/WaaS/FinishValidateSession":
		handler = s.serveFinishValidateSessionJSON
	case "/rpc/WaaS/InvalidateSession":
		handler = s.serveInvalidateSessionJSON
	case "/rpc/WaaS/SessionAuthProof":
		handler = s.serveSessionAuthProofJSON
	case "/rpc/WaaS/FederateAccount":
		handler = s.serveFederateAccountJSON
	case "/rpc/WaaS/RemoveAccount":
		handler = s.serveRemoveAccountJSON
	case "/rpc/WaaS/InitiateAuth":
		handler = s.serveInitiateAuthJSON
	case "/rpc/WaaS/AdoptChildWallet":
		handler = s.serveAdoptChildWalletJSON
	case "/rpc/WaaS/InitiateEmailAuth":
		handler = s.serveInitiateEmailAuthJSON
	case "/rpc/WaaS/SendIntent":
		handler = s.serveSendIntentJSON
	case "/rpc/WaaS/ChainList":
		handler = s.serveChainListJSON
	default:
		err := ErrWebrpcBadRoute.WithCause(fmt.Errorf("no WebRPC method defined for path %v", r.URL.Path))
		s.sendErrorJSON(w, r, err)
		return
	}

	if r.Method != "POST" {
		w.Header().Add("Allow", "POST") // RFC 9110.
		err := ErrWebrpcBadMethod.WithCause(fmt.Errorf("unsupported method %v (only POST is allowed)", r.Method))
		s.sendErrorJSON(w, r, err)
		return
	}

	contentType := r.Header.Get("Content-Type")
	if i := strings.Index(contentType, ";"); i >= 0 {
		contentType = contentType[:i]
	}
	contentType = strings.TrimSpace(strings.ToLower(contentType))

	switch contentType {
	case "application/json":
		if s.OnRequest != nil {
			if err := s.OnRequest(w, r); err != nil {
				rpcErr, ok := err.(WebRPCError)
				if !ok {
					rpcErr = ErrWebrpcEndpoint.WithCause(err)
				}
				s.sendErrorJSON(w, r, rpcErr)
				return
			}
		}

		handler(ctx, w, r)
	default:
		err := ErrWebrpcBadRequest.WithCause(fmt.Errorf("unsupported Content-Type %q (only application/json is allowed)", r.Header.Get("Content-Type")))
		s.sendErrorJSON(w, r, err)
	}
}

func (s *waaSServer) serveCreateProjectJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "CreateProject")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 uint64                  `json:"projectID"`
		Arg1 string                  `json:"name"`
		Arg2 *ProjectWalletPreConfig `json:"config"`
		Arg3 string                  `json:"jwtAlg"`
		Arg4 *string                 `json:"jwtSecret"`
		Arg5 *string                 `json:"jwtPublic"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, err := s.WaaS.CreateProject(ctx, reqPayload.Arg0, reqPayload.Arg1, reqPayload.Arg2, reqPayload.Arg3, reqPayload.Arg4, reqPayload.Arg5)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *Project `json:"project"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *waaSServer) serveDeployProjectParentWalletJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "DeployProjectParentWallet")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 uint64 `json:"projectID"`
		Arg1 string `json:"chainID"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, ret1, err := s.WaaS.DeployProjectParentWallet(ctx, reqPayload.Arg0, reqPayload.Arg1)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 string `json:"address"`
		Ret1 string `json:"txnHash"`
	}{ret0, ret1}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *waaSServer) serveUpdateProjectUserMapRulesJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "UpdateProjectUserMapRules")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 uint64                      `json:"projectID"`
		Arg1 *ProjectSessionUserMapRules `json:"userMapRules"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	err = s.WaaS.UpdateProjectUserMapRules(ctx, reqPayload.Arg0, reqPayload.Arg1)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("{}"))
}

func (s *waaSServer) serveProjectParentConfigJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "ProjectParentConfig")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 uint64 `json:"projectID"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, err := s.WaaS.ProjectParentConfig(ctx, reqPayload.Arg0)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 string `json:"config"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *waaSServer) serveProjectParentWalletJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "ProjectParentWallet")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 uint64 `json:"projectID"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, err := s.WaaS.ProjectParentWallet(ctx, reqPayload.Arg0)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 string `json:"address"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *waaSServer) serveProjectParentWalletStatusJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "ProjectParentWalletStatus")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 uint64 `json:"projectID"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, err := s.WaaS.ProjectParentWalletStatus(ctx, reqPayload.Arg0)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 []*ParentWalletStatus `json:"parentWalletStatus"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *waaSServer) serveProjectWalletsJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "ProjectWallets")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 uint64 `json:"projectID"`
		Arg1 *Page  `json:"page"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, ret1, err := s.WaaS.ProjectWallets(ctx, reqPayload.Arg0, reqPayload.Arg1)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 []*ProjectWallet `json:"wallets"`
		Ret1 *Page            `json:"page"`
	}{ret0, ret1}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *waaSServer) serveProjectUserSaltJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "ProjectUserSalt")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 uint64 `json:"projectID"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, err := s.WaaS.ProjectUserSalt(ctx, reqPayload.Arg0)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 string `json:"salt"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *waaSServer) serveGetProjectParentWalletDeployCalldataJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "GetProjectParentWalletDeployCalldata")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 uint64 `json:"projectID"`
		Arg1 string `json:"chainID"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, ret1, ret2, err := s.WaaS.GetProjectParentWalletDeployCalldata(ctx, reqPayload.Arg0, reqPayload.Arg1)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 string `json:"parentWalletAddress"`
		Ret1 string `json:"toAddress"`
		Ret2 string `json:"calldata"`
	}{ret0, ret1, ret2}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *waaSServer) serveProjectWalletJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "ProjectWallet")

	// Call service method implementation.
	ret0, err := s.WaaS.ProjectWallet(ctx)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 string `json:"address"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *waaSServer) serveSequenceContextJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "SequenceContext")

	// Call service method implementation.
	ret0, err := s.WaaS.SequenceContext(ctx)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *MiniSequenceContext `json:"context"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *waaSServer) serveUserSaltJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "UserSalt")

	// Call service method implementation.
	ret0, err := s.WaaS.UserSalt(ctx)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 string `json:"salt"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *waaSServer) serveUseHotWalletJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "UseHotWallet")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 string `json:"walletAddress"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, err := s.WaaS.UseHotWallet(ctx, reqPayload.Arg0)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 bool `json:"status"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *waaSServer) serveWalletsJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "Wallets")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 *Page `json:"page"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, ret1, err := s.WaaS.Wallets(ctx, reqPayload.Arg0)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 []*ProjectWallet `json:"wallets"`
		Ret1 *Page            `json:"page"`
	}{ret0, ret1}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *waaSServer) serveGenTransactionJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "GenTransaction")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 *Intent `json:"intent"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, err := s.WaaS.GenTransaction(ctx, reqPayload.Arg0)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *TransactionBundle `json:"result"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *waaSServer) serveSendTransactionJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "SendTransaction")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 *Intent              `json:"intent"`
		Arg1 *TransactionBundle   `json:"result"`
		Arg2 []*ProvidedSignature `json:"signatures"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, err := s.WaaS.SendTransaction(ctx, reqPayload.Arg0, reqPayload.Arg1, reqPayload.Arg2)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *IntentResponse `json:"response"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *waaSServer) serveSignMessageJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "SignMessage")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 *Intent              `json:"intent"`
		Arg1 *SignMessage         `json:"message"`
		Arg2 []*ProvidedSignature `json:"signatures"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, err := s.WaaS.SignMessage(ctx, reqPayload.Arg0, reqPayload.Arg1, reqPayload.Arg2)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *IntentResponse `json:"response"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *waaSServer) serveSignTypedDataJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "SignTypedData")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 *Intent              `json:"intent"`
		Arg1 *SignTypedData       `json:"message"`
		Arg2 []*ProvidedSignature `json:"signatures"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, err := s.WaaS.SignTypedData(ctx, reqPayload.Arg0, reqPayload.Arg1, reqPayload.Arg2)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *IntentResponse `json:"response"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *waaSServer) serveGetSessionJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "GetSession")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 string `json:"sessionId"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, err := s.WaaS.GetSession(ctx, reqPayload.Arg0)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *IntentResponse `json:"response"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *waaSServer) serveRegisterSessionJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "RegisterSession")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 string  `json:"userID"`
		Arg1 *Intent `json:"intent"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, err := s.WaaS.RegisterSession(ctx, reqPayload.Arg0, reqPayload.Arg1)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *IntentResponse `json:"response"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *waaSServer) serveStartSessionValidationJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "StartSessionValidation")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 string `json:"walletAddress"`
		Arg1 string `json:"sessionId"`
		Arg2 string `json:"deviceMetadata"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, err := s.WaaS.StartSessionValidation(ctx, reqPayload.Arg0, reqPayload.Arg1, reqPayload.Arg2)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *IntentResponse `json:"response"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *waaSServer) serveFinishValidateSessionJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "FinishValidateSession")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 string `json:"sessionId"`
		Arg1 string `json:"salt"`
		Arg2 string `json:"challenge"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, err := s.WaaS.FinishValidateSession(ctx, reqPayload.Arg0, reqPayload.Arg1, reqPayload.Arg2)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *IntentResponse `json:"response"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *waaSServer) serveInvalidateSessionJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "InvalidateSession")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 string `json:"sessionId"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, err := s.WaaS.InvalidateSession(ctx, reqPayload.Arg0)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 bool `json:"status"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *waaSServer) serveSessionAuthProofJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "SessionAuthProof")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 *Intent           `json:"intent"`
		Arg1 *SessionAuthProof `json:"proof"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, err := s.WaaS.SessionAuthProof(ctx, reqPayload.Arg0, reqPayload.Arg1)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *IntentResponse `json:"response"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *waaSServer) serveFederateAccountJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "FederateAccount")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 string  `json:"userID"`
		Arg1 *Intent `json:"intent"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, err := s.WaaS.FederateAccount(ctx, reqPayload.Arg0, reqPayload.Arg1)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *IntentResponse `json:"response"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *waaSServer) serveRemoveAccountJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "RemoveAccount")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 *Intent `json:"intent"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, err := s.WaaS.RemoveAccount(ctx, reqPayload.Arg0)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *IntentResponse `json:"response"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *waaSServer) serveInitiateAuthJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "InitiateAuth")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 *Intent `json:"intent"`
		Arg1 string  `json:"answer"`
		Arg2 string  `json:"challenge"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, err := s.WaaS.InitiateAuth(ctx, reqPayload.Arg0, reqPayload.Arg1, reqPayload.Arg2)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *IntentResponse `json:"response"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *waaSServer) serveAdoptChildWalletJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "AdoptChildWallet")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 *Intent              `json:"intent"`
		Arg1 uint32               `json:"checkpoint"`
		Arg2 []*ProvidedSignature `json:"signatures"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, err := s.WaaS.AdoptChildWallet(ctx, reqPayload.Arg0, reqPayload.Arg1, reqPayload.Arg2)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *IntentResponse `json:"response"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *waaSServer) serveInitiateEmailAuthJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "InitiateEmailAuth")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 *Intent `json:"intent"`
		Arg1 string  `json:"answerHash"`
		Arg2 string  `json:"salt"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, err := s.WaaS.InitiateEmailAuth(ctx, reqPayload.Arg0, reqPayload.Arg1, reqPayload.Arg2)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *IntentResponse `json:"response"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *waaSServer) serveSendIntentJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "SendIntent")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to read request data: %w", err)))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 *Intent `json:"intent"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCause(fmt.Errorf("failed to unmarshal request data: %w", err)))
		return
	}

	// Call service method implementation.
	ret0, err := s.WaaS.SendIntent(ctx, reqPayload.Arg0)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *IntentResponse `json:"response"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *waaSServer) serveChainListJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "ChainList")

	// Call service method implementation.
	ret0, err := s.WaaS.ChainList(ctx)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 []*Chain `json:"chains"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to marshal json response: %w", err)))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *waaSServer) sendErrorJSON(w http.ResponseWriter, r *http.Request, rpcErr WebRPCError) {
	if s.OnError != nil {
		s.OnError(r, &rpcErr)
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(rpcErr.HTTPStatus)

	respBody, _ := json.Marshal(rpcErr)
	w.Write(respBody)
}

func RespondWithError(w http.ResponseWriter, err error) {
	rpcErr, ok := err.(WebRPCError)
	if !ok {
		rpcErr = ErrWebrpcEndpoint.WithCause(err)
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(rpcErr.HTTPStatus)

	respBody, _ := json.Marshal(rpcErr)
	w.Write(respBody)
}

//
// Client
//

const WaaSPathPrefix = "/rpc/WaaS/"

type waaSClient struct {
	client HTTPClient
	urls   [31]string
}

func NewWaaSClient(addr string, client HTTPClient) WaaSClient {
	prefix := urlBase(addr) + WaaSPathPrefix
	urls := [31]string{
		prefix + "CreateProject",
		prefix + "DeployProjectParentWallet",
		prefix + "UpdateProjectUserMapRules",
		prefix + "ProjectParentConfig",
		prefix + "ProjectParentWallet",
		prefix + "ProjectParentWalletStatus",
		prefix + "ProjectWallets",
		prefix + "ProjectUserSalt",
		prefix + "GetProjectParentWalletDeployCalldata",
		prefix + "ProjectWallet",
		prefix + "SequenceContext",
		prefix + "UserSalt",
		prefix + "UseHotWallet",
		prefix + "Wallets",
		prefix + "GenTransaction",
		prefix + "SendTransaction",
		prefix + "SignMessage",
		prefix + "SignTypedData",
		prefix + "GetSession",
		prefix + "RegisterSession",
		prefix + "StartSessionValidation",
		prefix + "FinishValidateSession",
		prefix + "InvalidateSession",
		prefix + "SessionAuthProof",
		prefix + "FederateAccount",
		prefix + "RemoveAccount",
		prefix + "InitiateAuth",
		prefix + "AdoptChildWallet",
		prefix + "InitiateEmailAuth",
		prefix + "SendIntent",
		prefix + "ChainList",
	}
	return &waaSClient{
		client: client,
		urls:   urls,
	}
}

func (c *waaSClient) CreateProject(ctx context.Context, projectID uint64, name string, config *ProjectWalletPreConfig, jwtAlg string, jwtSecret *string, jwtPublic *string) (*Project, error) {
	in := struct {
		Arg0 uint64                  `json:"projectID"`
		Arg1 string                  `json:"name"`
		Arg2 *ProjectWalletPreConfig `json:"config"`
		Arg3 string                  `json:"jwtAlg"`
		Arg4 *string                 `json:"jwtSecret"`
		Arg5 *string                 `json:"jwtPublic"`
	}{projectID, name, config, jwtAlg, jwtSecret, jwtPublic}
	out := struct {
		Ret0 *Project `json:"project"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[0], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *waaSClient) DeployProjectParentWallet(ctx context.Context, projectID uint64, chainID string) (string, string, error) {
	in := struct {
		Arg0 uint64 `json:"projectID"`
		Arg1 string `json:"chainID"`
	}{projectID, chainID}
	out := struct {
		Ret0 string `json:"address"`
		Ret1 string `json:"txnHash"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[1], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, out.Ret1, err
}

func (c *waaSClient) UpdateProjectUserMapRules(ctx context.Context, projectID uint64, userMapRules *ProjectSessionUserMapRules) error {
	in := struct {
		Arg0 uint64                      `json:"projectID"`
		Arg1 *ProjectSessionUserMapRules `json:"userMapRules"`
	}{projectID, userMapRules}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[2], in, nil)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return err
}

func (c *waaSClient) ProjectParentConfig(ctx context.Context, projectID uint64) (string, error) {
	in := struct {
		Arg0 uint64 `json:"projectID"`
	}{projectID}
	out := struct {
		Ret0 string `json:"config"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[3], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *waaSClient) ProjectParentWallet(ctx context.Context, projectID uint64) (string, error) {
	in := struct {
		Arg0 uint64 `json:"projectID"`
	}{projectID}
	out := struct {
		Ret0 string `json:"address"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[4], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *waaSClient) ProjectParentWalletStatus(ctx context.Context, projectID uint64) ([]*ParentWalletStatus, error) {
	in := struct {
		Arg0 uint64 `json:"projectID"`
	}{projectID}
	out := struct {
		Ret0 []*ParentWalletStatus `json:"parentWalletStatus"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[5], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *waaSClient) ProjectWallets(ctx context.Context, projectID uint64, page *Page) ([]*ProjectWallet, *Page, error) {
	in := struct {
		Arg0 uint64 `json:"projectID"`
		Arg1 *Page  `json:"page"`
	}{projectID, page}
	out := struct {
		Ret0 []*ProjectWallet `json:"wallets"`
		Ret1 *Page            `json:"page"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[6], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, out.Ret1, err
}

func (c *waaSClient) ProjectUserSalt(ctx context.Context, projectID uint64) (string, error) {
	in := struct {
		Arg0 uint64 `json:"projectID"`
	}{projectID}
	out := struct {
		Ret0 string `json:"salt"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[7], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *waaSClient) GetProjectParentWalletDeployCalldata(ctx context.Context, projectID uint64, chainID string) (string, string, string, error) {
	in := struct {
		Arg0 uint64 `json:"projectID"`
		Arg1 string `json:"chainID"`
	}{projectID, chainID}
	out := struct {
		Ret0 string `json:"parentWalletAddress"`
		Ret1 string `json:"toAddress"`
		Ret2 string `json:"calldata"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[8], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, out.Ret1, out.Ret2, err
}

func (c *waaSClient) ProjectWallet(ctx context.Context) (string, error) {
	out := struct {
		Ret0 string `json:"address"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[9], nil, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *waaSClient) SequenceContext(ctx context.Context) (*MiniSequenceContext, error) {
	out := struct {
		Ret0 *MiniSequenceContext `json:"context"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[10], nil, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *waaSClient) UserSalt(ctx context.Context) (string, error) {
	out := struct {
		Ret0 string `json:"salt"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[11], nil, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *waaSClient) UseHotWallet(ctx context.Context, walletAddress string) (bool, error) {
	in := struct {
		Arg0 string `json:"walletAddress"`
	}{walletAddress}
	out := struct {
		Ret0 bool `json:"status"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[12], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *waaSClient) Wallets(ctx context.Context, page *Page) ([]*ProjectWallet, *Page, error) {
	in := struct {
		Arg0 *Page `json:"page"`
	}{page}
	out := struct {
		Ret0 []*ProjectWallet `json:"wallets"`
		Ret1 *Page            `json:"page"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[13], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, out.Ret1, err
}

func (c *waaSClient) GenTransaction(ctx context.Context, intent *Intent) (*TransactionBundle, error) {
	in := struct {
		Arg0 *Intent `json:"intent"`
	}{intent}
	out := struct {
		Ret0 *TransactionBundle `json:"result"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[14], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *waaSClient) SendTransaction(ctx context.Context, intent *Intent, result *TransactionBundle, signatures []*ProvidedSignature) (*IntentResponse, error) {
	in := struct {
		Arg0 *Intent              `json:"intent"`
		Arg1 *TransactionBundle   `json:"result"`
		Arg2 []*ProvidedSignature `json:"signatures"`
	}{intent, result, signatures}
	out := struct {
		Ret0 *IntentResponse `json:"response"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[15], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *waaSClient) SignMessage(ctx context.Context, intent *Intent, message *SignMessage, signatures []*ProvidedSignature) (*IntentResponse, error) {
	in := struct {
		Arg0 *Intent              `json:"intent"`
		Arg1 *SignMessage         `json:"message"`
		Arg2 []*ProvidedSignature `json:"signatures"`
	}{intent, message, signatures}
	out := struct {
		Ret0 *IntentResponse `json:"response"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[16], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *waaSClient) SignTypedData(ctx context.Context, intent *Intent, message *SignTypedData, signatures []*ProvidedSignature) (*IntentResponse, error) {
	in := struct {
		Arg0 *Intent              `json:"intent"`
		Arg1 *SignTypedData       `json:"message"`
		Arg2 []*ProvidedSignature `json:"signatures"`
	}{intent, message, signatures}
	out := struct {
		Ret0 *IntentResponse `json:"response"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[17], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *waaSClient) GetSession(ctx context.Context, sessionId string) (*IntentResponse, error) {
	in := struct {
		Arg0 string `json:"sessionId"`
	}{sessionId}
	out := struct {
		Ret0 *IntentResponse `json:"response"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[18], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *waaSClient) RegisterSession(ctx context.Context, userID string, intent *Intent) (*IntentResponse, error) {
	in := struct {
		Arg0 string  `json:"userID"`
		Arg1 *Intent `json:"intent"`
	}{userID, intent}
	out := struct {
		Ret0 *IntentResponse `json:"response"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[19], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *waaSClient) StartSessionValidation(ctx context.Context, walletAddress string, sessionId string, deviceMetadata string) (*IntentResponse, error) {
	in := struct {
		Arg0 string `json:"walletAddress"`
		Arg1 string `json:"sessionId"`
		Arg2 string `json:"deviceMetadata"`
	}{walletAddress, sessionId, deviceMetadata}
	out := struct {
		Ret0 *IntentResponse `json:"response"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[20], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *waaSClient) FinishValidateSession(ctx context.Context, sessionId string, salt string, challenge string) (*IntentResponse, error) {
	in := struct {
		Arg0 string `json:"sessionId"`
		Arg1 string `json:"salt"`
		Arg2 string `json:"challenge"`
	}{sessionId, salt, challenge}
	out := struct {
		Ret0 *IntentResponse `json:"response"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[21], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *waaSClient) InvalidateSession(ctx context.Context, sessionId string) (bool, error) {
	in := struct {
		Arg0 string `json:"sessionId"`
	}{sessionId}
	out := struct {
		Ret0 bool `json:"status"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[22], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *waaSClient) SessionAuthProof(ctx context.Context, intent *Intent, proof *SessionAuthProof) (*IntentResponse, error) {
	in := struct {
		Arg0 *Intent           `json:"intent"`
		Arg1 *SessionAuthProof `json:"proof"`
	}{intent, proof}
	out := struct {
		Ret0 *IntentResponse `json:"response"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[23], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *waaSClient) FederateAccount(ctx context.Context, userID string, intent *Intent) (*IntentResponse, error) {
	in := struct {
		Arg0 string  `json:"userID"`
		Arg1 *Intent `json:"intent"`
	}{userID, intent}
	out := struct {
		Ret0 *IntentResponse `json:"response"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[24], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *waaSClient) RemoveAccount(ctx context.Context, intent *Intent) (*IntentResponse, error) {
	in := struct {
		Arg0 *Intent `json:"intent"`
	}{intent}
	out := struct {
		Ret0 *IntentResponse `json:"response"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[25], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *waaSClient) InitiateAuth(ctx context.Context, intent *Intent, answer string, challenge string) (*IntentResponse, error) {
	in := struct {
		Arg0 *Intent `json:"intent"`
		Arg1 string  `json:"answer"`
		Arg2 string  `json:"challenge"`
	}{intent, answer, challenge}
	out := struct {
		Ret0 *IntentResponse `json:"response"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[26], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *waaSClient) AdoptChildWallet(ctx context.Context, intent *Intent, checkpoint uint32, signatures []*ProvidedSignature) (*IntentResponse, error) {
	in := struct {
		Arg0 *Intent              `json:"intent"`
		Arg1 uint32               `json:"checkpoint"`
		Arg2 []*ProvidedSignature `json:"signatures"`
	}{intent, checkpoint, signatures}
	out := struct {
		Ret0 *IntentResponse `json:"response"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[27], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *waaSClient) InitiateEmailAuth(ctx context.Context, intent *Intent, answerHash string, salt string) (*IntentResponse, error) {
	in := struct {
		Arg0 *Intent `json:"intent"`
		Arg1 string  `json:"answerHash"`
		Arg2 string  `json:"salt"`
	}{intent, answerHash, salt}
	out := struct {
		Ret0 *IntentResponse `json:"response"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[28], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *waaSClient) SendIntent(ctx context.Context, intent *Intent) (*IntentResponse, error) {
	in := struct {
		Arg0 *Intent `json:"intent"`
	}{intent}
	out := struct {
		Ret0 *IntentResponse `json:"response"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[29], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *waaSClient) ChainList(ctx context.Context) ([]*Chain, error) {
	out := struct {
		Ret0 []*Chain `json:"chains"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[30], nil, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

// HTTPClient is the interface used by generated clients to send HTTP requests.
// It is fulfilled by *(net/http).Client, which is sufficient for most users.
// Users can provide their own implementation for special retry policies.
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// urlBase helps ensure that addr specifies a scheme. If it is unparsable
// as a URL, it returns addr unchanged.
func urlBase(addr string) string {
	// If the addr specifies a scheme, use it. If not, default to
	// http. If url.Parse fails on it, return it unchanged.
	url, err := url.Parse(addr)
	if err != nil {
		return addr
	}
	if url.Scheme == "" {
		url.Scheme = "http"
	}
	return url.String()
}

// newRequest makes an http.Request from a client, adding common headers.
func newRequest(ctx context.Context, url string, reqBody io.Reader, contentType string) (*http.Request, error) {
	req, err := http.NewRequestWithContext(ctx, "POST", url, reqBody)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", contentType)
	req.Header.Set("Content-Type", contentType)
	if headers, ok := HTTPRequestHeaders(ctx); ok {
		for k := range headers {
			for _, v := range headers[k] {
				req.Header.Add(k, v)
			}
		}
	}
	return req, nil
}

// doHTTPRequest is common code to make a request to the remote service.
func doHTTPRequest(ctx context.Context, client HTTPClient, url string, in, out interface{}) (*http.Response, error) {
	reqBody, err := json.Marshal(in)
	if err != nil {
		return nil, ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to marshal JSON body: %w", err))
	}
	if err = ctx.Err(); err != nil {
		return nil, ErrWebrpcRequestFailed.WithCause(fmt.Errorf("aborted because context was done: %w", err))
	}

	req, err := newRequest(ctx, url, bytes.NewBuffer(reqBody), "application/json")
	if err != nil {
		return nil, ErrWebrpcRequestFailed.WithCause(fmt.Errorf("could not build request: %w", err))
	}

	resp, err := client.Do(req)
	if err != nil {
		return nil, ErrWebrpcRequestFailed.WithCause(err)
	}

	if resp.StatusCode != 200 {
		respBody, err := io.ReadAll(resp.Body)
		if err != nil {
			return nil, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to read server error response body: %w", err))
		}

		var rpcErr WebRPCError
		if err := json.Unmarshal(respBody, &rpcErr); err != nil {
			return nil, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to unmarshal server error: %w", err))
		}
		if rpcErr.Cause != "" {
			rpcErr.cause = errors.New(rpcErr.Cause)
		}
		return nil, rpcErr
	}

	if out != nil {
		respBody, err := io.ReadAll(resp.Body)
		if err != nil {
			return nil, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to read response body: %w", err))
		}

		err = json.Unmarshal(respBody, &out)
		if err != nil {
			return nil, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to unmarshal JSON response body: %w", err))
		}
	}

	return resp, nil
}

func WithHTTPRequestHeaders(ctx context.Context, h http.Header) (context.Context, error) {
	if _, ok := h["Accept"]; ok {
		return nil, errors.New("provided header cannot set Accept")
	}
	if _, ok := h["Content-Type"]; ok {
		return nil, errors.New("provided header cannot set Content-Type")
	}

	copied := make(http.Header, len(h))
	for k, vv := range h {
		if vv == nil {
			copied[k] = nil
			continue
		}
		copied[k] = make([]string, len(vv))
		copy(copied[k], vv)
	}

	return context.WithValue(ctx, HTTPClientRequestHeadersCtxKey, copied), nil
}

func HTTPRequestHeaders(ctx context.Context) (http.Header, bool) {
	h, ok := ctx.Value(HTTPClientRequestHeadersCtxKey).(http.Header)
	return h, ok
}

//
// Helpers
//

type method struct {
	Name        string
	Service     string
	Annotations map[string]string
}

type contextKey struct {
	name string
}

func (k *contextKey) String() string {
	return "webrpc context value " + k.name
}

var (
	HTTPClientRequestHeadersCtxKey = &contextKey{"HTTPClientRequestHeaders"}
	HTTPResponseWriterCtxKey       = &contextKey{"HTTPResponseWriter"}

	HTTPRequestCtxKey = &contextKey{"HTTPRequest"}

	ServiceNameCtxKey = &contextKey{"ServiceName"}

	MethodNameCtxKey = &contextKey{"MethodName"}
)

func ServiceNameFromContext(ctx context.Context) string {
	service, _ := ctx.Value(ServiceNameCtxKey).(string)
	return service
}

func MethodNameFromContext(ctx context.Context) string {
	method, _ := ctx.Value(MethodNameCtxKey).(string)
	return method
}

func RequestFromContext(ctx context.Context) *http.Request {
	r, _ := ctx.Value(HTTPRequestCtxKey).(*http.Request)
	return r
}

func MethodCtx(ctx context.Context) (method, bool) {
	req := RequestFromContext(ctx)
	if req == nil {
		return method{}, false
	}

	m, ok := methods[req.URL.Path]
	if !ok {
		return method{}, false
	}

	return m, true
}

func ResponseWriterFromContext(ctx context.Context) http.ResponseWriter {
	w, _ := ctx.Value(HTTPResponseWriterCtxKey).(http.ResponseWriter)
	return w
}

//
// Errors
//

type WebRPCError struct {
	Name       string `json:"error"`
	Code       int    `json:"code"`
	Message    string `json:"msg"`
	Cause      string `json:"cause,omitempty"`
	HTTPStatus int    `json:"status"`
	cause      error
}

var _ error = WebRPCError{}

func (e WebRPCError) Error() string {
	if e.cause != nil {
		return fmt.Sprintf("%s %d: %s: %v", e.Name, e.Code, e.Message, e.cause)
	}
	return fmt.Sprintf("%s %d: %s", e.Name, e.Code, e.Message)
}

func (e WebRPCError) Is(target error) bool {
	if target == nil {
		return false
	}
	if rpcErr, ok := target.(WebRPCError); ok {
		return rpcErr.Code == e.Code
	}
	return errors.Is(e.cause, target)
}

func (e WebRPCError) Unwrap() error {
	return e.cause
}

func (e WebRPCError) WithCause(cause error) WebRPCError {
	err := e
	err.cause = cause
	err.Cause = cause.Error()
	return err
}

func (e WebRPCError) WithCausef(format string, args ...interface{}) WebRPCError {
	cause := fmt.Errorf(format, args...)
	err := e
	err.cause = cause
	err.Cause = cause.Error()
	return err
}

// Deprecated: Use .WithCause() method on WebRPCError.
func ErrorWithCause(rpcErr WebRPCError, cause error) WebRPCError {
	return rpcErr.WithCause(cause)
}

// Webrpc errors
var (
	ErrWebrpcEndpoint           = WebRPCError{Code: 0, Name: "WebrpcEndpoint", Message: "endpoint error", HTTPStatus: 400}
	ErrWebrpcRequestFailed      = WebRPCError{Code: -1, Name: "WebrpcRequestFailed", Message: "request failed", HTTPStatus: 400}
	ErrWebrpcBadRoute           = WebRPCError{Code: -2, Name: "WebrpcBadRoute", Message: "bad route", HTTPStatus: 404}
	ErrWebrpcBadMethod          = WebRPCError{Code: -3, Name: "WebrpcBadMethod", Message: "bad method", HTTPStatus: 405}
	ErrWebrpcBadRequest         = WebRPCError{Code: -4, Name: "WebrpcBadRequest", Message: "bad request", HTTPStatus: 400}
	ErrWebrpcBadResponse        = WebRPCError{Code: -5, Name: "WebrpcBadResponse", Message: "bad response", HTTPStatus: 500}
	ErrWebrpcServerPanic        = WebRPCError{Code: -6, Name: "WebrpcServerPanic", Message: "server panic", HTTPStatus: 500}
	ErrWebrpcInternalError      = WebRPCError{Code: -7, Name: "WebrpcInternalError", Message: "internal error", HTTPStatus: 500}
	ErrWebrpcClientDisconnected = WebRPCError{Code: -8, Name: "WebrpcClientDisconnected", Message: "client disconnected", HTTPStatus: 400}
	ErrWebrpcStreamLost         = WebRPCError{Code: -9, Name: "WebrpcStreamLost", Message: "stream lost", HTTPStatus: 400}
	ErrWebrpcStreamFinished     = WebRPCError{Code: -10, Name: "WebrpcStreamFinished", Message: "stream finished", HTTPStatus: 200}
)

// Schema errors
var (
	ErrAborted    = WebRPCError{Code: 1005, Name: "Aborted", Message: "Request aborted", HTTPStatus: 400}
	ErrGeoblocked = WebRPCError{Code: 1006, Name: "Geoblocked", Message: "Geoblocked region", HTTPStatus: 451}
	ErrNotFound   = WebRPCError{Code: 3000, Name: "NotFound", Message: "Resource not found", HTTPStatus: 400}
)
