// sequence-wallet v0.1.0 d3f99a13d83af021ceb67e9f4431e941e4d6ffec
// --
// Code generated by webrpc-gen@v0.14.0-dev with golang@v0.10.0 generator. DO NOT EDIT.
//
// webrpc-gen -schema=wallet.ridl -target=golang@v0.10.0 -pkg=api -client -out=./clients/wallet.gen.go
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"time"

	"github.com/0xsequence/go-sequence/lib/prototyp"
)

// WebRPC description and code-gen version
func WebRPCVersion() string {
	return "v1"
}

// Schema version of your RIDL schema
func WebRPCSchemaVersion() string {
	return "v0.1.0"
}

// Schema hash generated from your RIDL schema
func WebRPCSchemaHash() string {
	return "d3f99a13d83af021ceb67e9f4431e941e4d6ffec"
}

//
// Types
//

type Intent struct {
	Version    string       `json:"version"`
	Name       string       `json:"name"`
	ExpiresAt  uint64       `json:"expiresAt"`
	IssuedAt   uint64       `json:"issuedAt"`
	Data       interface{}  `json:"data"`
	Signatures []*Signature `json:"signatures,omitempty"`
}

type Signature struct {
	SessionID string `json:"sessionId"`
	Signature string `json:"signature"`
}

type IntentResponse struct {
	Code string      `json:"code"`
	Data interface{} `json:"data"`
}

type SortOrder uint32

const (
	SortOrder_DESC SortOrder = 0
	SortOrder_ASC  SortOrder = 1
)

var SortOrder_name = map[uint32]string{
	0: "DESC",
	1: "ASC",
}

var SortOrder_value = map[string]uint32{
	"DESC": 0,
	"ASC":  1,
}

func (x SortOrder) String() string {
	return SortOrder_name[uint32(x)]
}

func (x SortOrder) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBufferString(`"`)
	buf.WriteString(SortOrder_name[uint32(x)])
	buf.WriteString(`"`)
	return buf.Bytes(), nil
}

func (x *SortOrder) UnmarshalJSON(b []byte) error {
	var j string
	err := json.Unmarshal(b, &j)
	if err != nil {
		return err
	}
	*x = SortOrder(SortOrder_value[j])
	return nil
}

type Project struct {
	Id        uint64        `json:"id" db:"id,omitempty"`
	Name      string        `json:"name" db:"name"`
	JwtAlg    string        `json:"jwtAlg" db:"jwt_alg"`
	JwtSecret *string       `json:"jwtSecret" db:"jwt_secret"`
	JwtPublic *string       `json:"jwtPublic" db:"jwt_public"`
	UserSalt  prototyp.Hash `json:"user_salt" db:"user_salt"`
	Salt      prototyp.Hash `json:"-" db:"salt"`
	UpdatedAt *time.Time    `json:"updatedAt,omitempty" db:"updated_at,omitempty"`
	CreatedAt *time.Time    `json:"createdAt,omitempty" db:"created_at,omitempty"`
}

type ProjectWallet struct {
	Id            uint64        `json:"id" db:"id,omitempty"`
	ProjectID     uint64        `json:"projectID" db:"project_id"`
	WalletIndex   uint64        `json:"walletIndex" db:"wallet_index"`
	WalletAddress prototyp.Hash `json:"walletAddress" db:"wallet_address"`
	UserID        string        `json:"userId" db:"user_id"`
	UpdatedAt     *time.Time    `json:"updatedAt,omitempty" db:"updated_at,omitempty"`
	CreatedAt     *time.Time    `json:"createdAt,omitempty" db:"created_at,omitempty"`
}

type ProjectWalletConfig struct {
	Id        uint64        `json:"id" db:"id,omitempty"`
	ProjectID uint64        `json:"projectID" db:"project_id"`
	Address   prototyp.Hash `json:"address" db:"address"`
	Config    string        `json:"config" db:"config"`
	UpdatedAt *time.Time    `json:"updatedAt,omitempty" db:"updated_at,omitempty"`
	CreatedAt *time.Time    `json:"createdAt,omitempty" db:"created_at,omitempty"`
}

type Transaction struct {
	To            string `json:"to"`
	Value         string `json:"value"`
	GasLimit      string `json:"gasLimit"`
	Data          string `json:"data"`
	DelegateCall  bool   `json:"delegateCall"`
	RevertOnError bool   `json:"revertOnError"`
}

type TransactionBundle struct {
	ChainID      string         `json:"chainID"`
	Nonce        string         `json:"nonce"`
	Transactions []*Transaction `json:"transactions"`
}

type SignMessage struct {
	ChainID string `json:"chainID"`
	Message string `json:"message"`
}

type ParentWalletStatus struct {
	ChainID  string `json:"chainID"`
	Address  string `json:"address"`
	Deployed bool   `json:"deployed"`
}

type Chain struct {
	Id   uint64 `json:"id"`
	Name string `json:"name"`
}

type Page struct {
	PageSize     *uint32      `json:"pageSize"`
	Page         *uint32      `json:"page"`
	TotalRecords *uint64      `json:"totalRecords"`
	Column       *string      `json:"column"`
	Before       *interface{} `json:"before"`
	After        *interface{} `json:"after"`
	Sort         []*SortBy    `json:"sort"`
}

type SortBy struct {
	Column string     `json:"column"`
	Order  *SortOrder `json:"order"`
}

type ProvidedSignature struct {
	Signature string `json:"Signature"`
	Digest    string `json:"Digest"`
	Address   string `json:"Address"`
}

type ProjectWalletPreConfig struct {
	ProjectRecoveryAddress string                      `json:"projectRecoveryAddress"`
	UserMapRules           *ProjectSessionUserMapRules `json:"userMapRules"`
}

type ProjectSessionUserMapRules struct {
	AllowIdTokens                     bool   `json:"allowIdTokens" db:"allow_id_tokens"`
	AllowEmails                       bool   `json:"allowEmails" db:"allow_emails"`
	AllowPhones                       bool   `json:"allowPhones" db:"allow_phones"`
	UserIdTemplate                    string `json:"userIdTemplate" db:"user_id_template"`
	IdTokenTrustedAuthenticatorIssuer string `json:"idTokenTrustedAuthenticatorIssuer" db:"id_token_trusted_authenticator_issuer"`
}

type SessionAuthProof struct {
	Wallet     string               `json:"wallet"`
	Message    *SignMessage         `json:"message"`
	Signatures []*ProvidedSignature `json:"signatures"`
}

type MiniSequenceContext struct {
	Factory    string `json:"factory"`
	MainModule string `json:"mainModule"`
}

type WaaS interface {
	CreateProject(ctx context.Context, projectID uint64, name string, config *ProjectWalletPreConfig, jwtAlg string, jwtSecret *string, jwtPublic *string) (*Project, error)
	ProjectParentConfig(ctx context.Context, projectID uint64) (string, error)
	ProjectParentWallet(ctx context.Context, projectID uint64) (string, error)
	ProjectParentWalletStatus(ctx context.Context, projectID uint64) ([]*ParentWalletStatus, error)
	DeployProjectParentWallet(ctx context.Context, projectID uint64, chainID string) (string, string, error)
	ProjectWallets(ctx context.Context, projectID uint64, page *Page) ([]*ProjectWallet, *Page, error)
	ProjectUserSalt(ctx context.Context, projectID uint64) (string, error)
	ProjectWallet(ctx context.Context) (string, error)
	SequenceContext(ctx context.Context) (*MiniSequenceContext, error)
	UserSalt(ctx context.Context) (string, error)
	UseHotWallet(ctx context.Context, walletAddress string) (bool, error)
	Wallets(ctx context.Context, page *Page) ([]*ProjectWallet, *Page, error)
	GenTransaction(ctx context.Context, intent *Intent) (*TransactionBundle, error)
	SendTransaction(ctx context.Context, intent *Intent, result *TransactionBundle, signatures []*ProvidedSignature) (*IntentResponse, error)
	SignMessage(ctx context.Context, intent *Intent, message *SignMessage, signatures []*ProvidedSignature) (*IntentResponse, error)
	GetSession(ctx context.Context, sessionId string) (*IntentResponse, error)
	RegisterSession(ctx context.Context, userID string, intent *Intent) (*IntentResponse, error)
	StartSessionValidation(ctx context.Context, walletAddress string, sessionId string, deviceMetadata string) (*IntentResponse, error)
	FinishValidateSession(ctx context.Context, sessionId string, salt string, challenge string) (*IntentResponse, error)
	InvalidateSession(ctx context.Context, sessionId string) (bool, error)
	SessionAuthProof(ctx context.Context, intent *Intent, proof *SessionAuthProof) (*IntentResponse, error)
	SendIntent(ctx context.Context, intent *Intent) (*IntentResponse, error)
	ChainList(ctx context.Context) ([]*Chain, error)
}

var WebRPCServices = map[string][]string{
	"WaaS": {
		"CreateProject",
		"ProjectParentConfig",
		"ProjectParentWallet",
		"ProjectParentWalletStatus",
		"DeployProjectParentWallet",
		"ProjectWallets",
		"ProjectUserSalt",
		"ProjectWallet",
		"SequenceContext",
		"UserSalt",
		"UseHotWallet",
		"Wallets",
		"GenTransaction",
		"SendTransaction",
		"SignMessage",
		"GetSession",
		"RegisterSession",
		"StartSessionValidation",
		"FinishValidateSession",
		"InvalidateSession",
		"SessionAuthProof",
		"SendIntent",
		"ChainList",
	},
}

//
// Client
//

const WaaSPathPrefix = "/rpc/WaaS/"

type waaSClient struct {
	client HTTPClient
	urls   [23]string
}

func NewWaaSClient(addr string, client HTTPClient) WaaS {
	prefix := urlBase(addr) + WaaSPathPrefix
	urls := [23]string{
		prefix + "CreateProject",
		prefix + "ProjectParentConfig",
		prefix + "ProjectParentWallet",
		prefix + "ProjectParentWalletStatus",
		prefix + "DeployProjectParentWallet",
		prefix + "ProjectWallets",
		prefix + "ProjectUserSalt",
		prefix + "ProjectWallet",
		prefix + "SequenceContext",
		prefix + "UserSalt",
		prefix + "UseHotWallet",
		prefix + "Wallets",
		prefix + "GenTransaction",
		prefix + "SendTransaction",
		prefix + "SignMessage",
		prefix + "GetSession",
		prefix + "RegisterSession",
		prefix + "StartSessionValidation",
		prefix + "FinishValidateSession",
		prefix + "InvalidateSession",
		prefix + "SessionAuthProof",
		prefix + "SendIntent",
		prefix + "ChainList",
	}
	return &waaSClient{
		client: client,
		urls:   urls,
	}
}

func (c *waaSClient) CreateProject(ctx context.Context, projectID uint64, name string, config *ProjectWalletPreConfig, jwtAlg string, jwtSecret *string, jwtPublic *string) (*Project, error) {
	in := struct {
		Arg0 uint64                  `json:"projectID"`
		Arg1 string                  `json:"name"`
		Arg2 *ProjectWalletPreConfig `json:"config"`
		Arg3 string                  `json:"jwtAlg"`
		Arg4 *string                 `json:"jwtSecret"`
		Arg5 *string                 `json:"jwtPublic"`
	}{projectID, name, config, jwtAlg, jwtSecret, jwtPublic}
	out := struct {
		Ret0 *Project `json:"project"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[0], in, &out)
	return out.Ret0, err
}

func (c *waaSClient) ProjectParentConfig(ctx context.Context, projectID uint64) (string, error) {
	in := struct {
		Arg0 uint64 `json:"projectID"`
	}{projectID}
	out := struct {
		Ret0 string `json:"config"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[1], in, &out)
	return out.Ret0, err
}

func (c *waaSClient) ProjectParentWallet(ctx context.Context, projectID uint64) (string, error) {
	in := struct {
		Arg0 uint64 `json:"projectID"`
	}{projectID}
	out := struct {
		Ret0 string `json:"address"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[2], in, &out)
	return out.Ret0, err
}

func (c *waaSClient) ProjectParentWalletStatus(ctx context.Context, projectID uint64) ([]*ParentWalletStatus, error) {
	in := struct {
		Arg0 uint64 `json:"projectID"`
	}{projectID}
	out := struct {
		Ret0 []*ParentWalletStatus `json:"parentWalletStatus"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[3], in, &out)
	return out.Ret0, err
}

func (c *waaSClient) DeployProjectParentWallet(ctx context.Context, projectID uint64, chainID string) (string, string, error) {
	in := struct {
		Arg0 uint64 `json:"projectID"`
		Arg1 string `json:"chainID"`
	}{projectID, chainID}
	out := struct {
		Ret0 string `json:"address"`
		Ret1 string `json:"txnHash"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[4], in, &out)
	return out.Ret0, out.Ret1, err
}

func (c *waaSClient) ProjectWallets(ctx context.Context, projectID uint64, page *Page) ([]*ProjectWallet, *Page, error) {
	in := struct {
		Arg0 uint64 `json:"projectID"`
		Arg1 *Page  `json:"page"`
	}{projectID, page}
	out := struct {
		Ret0 []*ProjectWallet `json:"wallets"`
		Ret1 *Page            `json:"page"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[5], in, &out)
	return out.Ret0, out.Ret1, err
}

func (c *waaSClient) ProjectUserSalt(ctx context.Context, projectID uint64) (string, error) {
	in := struct {
		Arg0 uint64 `json:"projectID"`
	}{projectID}
	out := struct {
		Ret0 string `json:"salt"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[6], in, &out)
	return out.Ret0, err
}

func (c *waaSClient) ProjectWallet(ctx context.Context) (string, error) {
	out := struct {
		Ret0 string `json:"address"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[7], nil, &out)
	return out.Ret0, err
}

func (c *waaSClient) SequenceContext(ctx context.Context) (*MiniSequenceContext, error) {
	out := struct {
		Ret0 *MiniSequenceContext `json:"context"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[8], nil, &out)
	return out.Ret0, err
}

func (c *waaSClient) UserSalt(ctx context.Context) (string, error) {
	out := struct {
		Ret0 string `json:"salt"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[9], nil, &out)
	return out.Ret0, err
}

func (c *waaSClient) UseHotWallet(ctx context.Context, walletAddress string) (bool, error) {
	in := struct {
		Arg0 string `json:"walletAddress"`
	}{walletAddress}
	out := struct {
		Ret0 bool `json:"status"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[10], in, &out)
	return out.Ret0, err
}

func (c *waaSClient) Wallets(ctx context.Context, page *Page) ([]*ProjectWallet, *Page, error) {
	in := struct {
		Arg0 *Page `json:"page"`
	}{page}
	out := struct {
		Ret0 []*ProjectWallet `json:"wallets"`
		Ret1 *Page            `json:"page"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[11], in, &out)
	return out.Ret0, out.Ret1, err
}

func (c *waaSClient) GenTransaction(ctx context.Context, intent *Intent) (*TransactionBundle, error) {
	in := struct {
		Arg0 *Intent `json:"intent"`
	}{intent}
	out := struct {
		Ret0 *TransactionBundle `json:"result"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[12], in, &out)
	return out.Ret0, err
}

func (c *waaSClient) SendTransaction(ctx context.Context, intent *Intent, result *TransactionBundle, signatures []*ProvidedSignature) (*IntentResponse, error) {
	in := struct {
		Arg0 *Intent              `json:"intent"`
		Arg1 *TransactionBundle   `json:"result"`
		Arg2 []*ProvidedSignature `json:"signatures"`
	}{intent, result, signatures}
	out := struct {
		Ret0 *IntentResponse `json:"response"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[13], in, &out)
	return out.Ret0, err
}

func (c *waaSClient) SignMessage(ctx context.Context, intent *Intent, message *SignMessage, signatures []*ProvidedSignature) (*IntentResponse, error) {
	in := struct {
		Arg0 *Intent              `json:"intent"`
		Arg1 *SignMessage         `json:"message"`
		Arg2 []*ProvidedSignature `json:"signatures"`
	}{intent, message, signatures}
	out := struct {
		Ret0 *IntentResponse `json:"response"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[14], in, &out)
	return out.Ret0, err
}

func (c *waaSClient) GetSession(ctx context.Context, sessionId string) (*IntentResponse, error) {
	in := struct {
		Arg0 string `json:"sessionId"`
	}{sessionId}
	out := struct {
		Ret0 *IntentResponse `json:"response"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[15], in, &out)
	return out.Ret0, err
}

func (c *waaSClient) RegisterSession(ctx context.Context, userID string, intent *Intent) (*IntentResponse, error) {
	in := struct {
		Arg0 string  `json:"userID"`
		Arg1 *Intent `json:"intent"`
	}{userID, intent}
	out := struct {
		Ret0 *IntentResponse `json:"response"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[16], in, &out)
	return out.Ret0, err
}

func (c *waaSClient) StartSessionValidation(ctx context.Context, walletAddress string, sessionId string, deviceMetadata string) (*IntentResponse, error) {
	in := struct {
		Arg0 string `json:"walletAddress"`
		Arg1 string `json:"sessionId"`
		Arg2 string `json:"deviceMetadata"`
	}{walletAddress, sessionId, deviceMetadata}
	out := struct {
		Ret0 *IntentResponse `json:"response"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[17], in, &out)
	return out.Ret0, err
}

func (c *waaSClient) FinishValidateSession(ctx context.Context, sessionId string, salt string, challenge string) (*IntentResponse, error) {
	in := struct {
		Arg0 string `json:"sessionId"`
		Arg1 string `json:"salt"`
		Arg2 string `json:"challenge"`
	}{sessionId, salt, challenge}
	out := struct {
		Ret0 *IntentResponse `json:"response"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[18], in, &out)
	return out.Ret0, err
}

func (c *waaSClient) InvalidateSession(ctx context.Context, sessionId string) (bool, error) {
	in := struct {
		Arg0 string `json:"sessionId"`
	}{sessionId}
	out := struct {
		Ret0 bool `json:"status"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[19], in, &out)
	return out.Ret0, err
}

func (c *waaSClient) SessionAuthProof(ctx context.Context, intent *Intent, proof *SessionAuthProof) (*IntentResponse, error) {
	in := struct {
		Arg0 *Intent           `json:"intent"`
		Arg1 *SessionAuthProof `json:"proof"`
	}{intent, proof}
	out := struct {
		Ret0 *IntentResponse `json:"response"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[20], in, &out)
	return out.Ret0, err
}

func (c *waaSClient) SendIntent(ctx context.Context, intent *Intent) (*IntentResponse, error) {
	in := struct {
		Arg0 *Intent `json:"intent"`
	}{intent}
	out := struct {
		Ret0 *IntentResponse `json:"response"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[21], in, &out)
	return out.Ret0, err
}

func (c *waaSClient) ChainList(ctx context.Context) ([]*Chain, error) {
	out := struct {
		Ret0 []*Chain `json:"chains"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[22], nil, &out)
	return out.Ret0, err
}

// HTTPClient is the interface used by generated clients to send HTTP requests.
// It is fulfilled by *(net/http).Client, which is sufficient for most users.
// Users can provide their own implementation for special retry policies.
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// urlBase helps ensure that addr specifies a scheme. If it is unparsable
// as a URL, it returns addr unchanged.
func urlBase(addr string) string {
	// If the addr specifies a scheme, use it. If not, default to
	// http. If url.Parse fails on it, return it unchanged.
	url, err := url.Parse(addr)
	if err != nil {
		return addr
	}
	if url.Scheme == "" {
		url.Scheme = "http"
	}
	return url.String()
}

// newRequest makes an http.Request from a client, adding common headers.
func newRequest(ctx context.Context, url string, reqBody io.Reader, contentType string) (*http.Request, error) {
	req, err := http.NewRequest("POST", url, reqBody)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", contentType)
	req.Header.Set("Content-Type", contentType)
	if headers, ok := HTTPRequestHeaders(ctx); ok {
		for k := range headers {
			for _, v := range headers[k] {
				req.Header.Add(k, v)
			}
		}
	}
	return req, nil
}

// doJSONRequest is common code to make a request to the remote service.
func doJSONRequest(ctx context.Context, client HTTPClient, url string, in, out interface{}) error {
	reqBody, err := json.Marshal(in)
	if err != nil {
		return clientError("failed to marshal json request", err)
	}
	if err = ctx.Err(); err != nil {
		return clientError("aborted because context was done", err)
	}

	req, err := newRequest(ctx, url, bytes.NewBuffer(reqBody), "application/json")
	if err != nil {
		return clientError("could not build request", err)
	}
	resp, err := client.Do(req)
	if err != nil {
		return clientError("request failed", err)
	}

	defer func() {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = clientError("failed to close response body", cerr)
		}
	}()

	if err = ctx.Err(); err != nil {
		return clientError("aborted because context was done", err)
	}

	if resp.StatusCode != 200 {
		return errorFromResponse(resp)
	}

	if out != nil {
		respBody, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			return clientError("failed to read response body", err)
		}

		err = json.Unmarshal(respBody, &out)
		if err != nil {
			return clientError("failed to unmarshal json response body", err)
		}
		if err = ctx.Err(); err != nil {
			return clientError("aborted because context was done", err)
		}
	}

	return nil
}

// errorFromResponse builds a webrpc Error from a non-200 HTTP response.
func errorFromResponse(resp *http.Response) Error {
	respBody, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return clientError("failed to read server error response body", err)
	}

	var respErr ErrorPayload
	if err := json.Unmarshal(respBody, &respErr); err != nil {
		return clientError("failed unmarshal error response", err)
	}

	errCode := ErrorCode(respErr.Code)

	if HTTPStatusFromErrorCode(errCode) == 0 {
		return ErrorInternal("invalid code returned from server error response: %s", respErr.Code)
	}

	return &rpcErr{
		code:  errCode,
		msg:   respErr.Msg,
		cause: errors.New(respErr.Cause),
	}
}

func clientError(desc string, err error) Error {
	return WrapError(ErrInternal, err, desc)
}

func WithHTTPRequestHeaders(ctx context.Context, h http.Header) (context.Context, error) {
	if _, ok := h["Accept"]; ok {
		return nil, errors.New("provided header cannot set Accept")
	}
	if _, ok := h["Content-Type"]; ok {
		return nil, errors.New("provided header cannot set Content-Type")
	}

	copied := make(http.Header, len(h))
	for k, vv := range h {
		if vv == nil {
			copied[k] = nil
			continue
		}
		copied[k] = make([]string, len(vv))
		copy(copied[k], vv)
	}

	return context.WithValue(ctx, HTTPClientRequestHeadersCtxKey, copied), nil
}

func HTTPRequestHeaders(ctx context.Context) (http.Header, bool) {
	h, ok := ctx.Value(HTTPClientRequestHeadersCtxKey).(http.Header)
	return h, ok
}

//
// Helpers
//

type ErrorPayload struct {
	Status int    `json:"status"`
	Code   string `json:"code"`
	Cause  string `json:"cause,omitempty"`
	Msg    string `json:"msg"`
	Error  string `json:"error"`
}

type Error interface {
	// Code is of the valid error codes
	Code() ErrorCode

	// Msg returns a human-readable, unstructured messages describing the error
	Msg() string

	// Cause is reason for the error
	Cause() error

	// Error returns a string of the form "webrpc error <Code>: <Msg>"
	Error() string

	// Error response payload
	Payload() ErrorPayload
}

func Errorf(code ErrorCode, msgf string, args ...interface{}) Error {
	msg := fmt.Sprintf(msgf, args...)
	if IsValidErrorCode(code) {
		return &rpcErr{code: code, msg: msg}
	}
	return &rpcErr{code: ErrInternal, msg: "invalid error type " + string(code)}
}

func WrapError(code ErrorCode, cause error, format string, args ...interface{}) Error {
	msg := fmt.Sprintf(format, args...)
	if IsValidErrorCode(code) {
		return &rpcErr{code: code, msg: msg, cause: cause}
	}
	return &rpcErr{code: ErrInternal, msg: "invalid error type " + string(code), cause: cause}
}

func Failf(format string, args ...interface{}) Error {
	return Errorf(ErrFail, format, args...)
}

func WrapFailf(cause error, format string, args ...interface{}) Error {
	return WrapError(ErrFail, cause, format, args...)
}

func ErrorNotFound(format string, args ...interface{}) Error {
	return Errorf(ErrNotFound, format, args...)
}

func ErrorInvalidArgument(argument string, validationMsg string) Error {
	return Errorf(ErrInvalidArgument, argument+" "+validationMsg)
}

func ErrorRequiredArgument(argument string) Error {
	return ErrorInvalidArgument(argument, "is required")
}

func ErrorInternal(format string, args ...interface{}) Error {
	return Errorf(ErrInternal, format, args...)
}

type ErrorCode string

const (
	// Unknown error. For example when handling errors raised by APIs that do not
	// return enough error information.
	ErrUnknown ErrorCode = "unknown"

	// Fail error. General failure error type.
	ErrFail ErrorCode = "fail"

	// Canceled indicates the operation was cancelled (typically by the caller).
	ErrCanceled ErrorCode = "canceled"

	// InvalidArgument indicates client specified an invalid argument. It
	// indicates arguments that are problematic regardless of the state of the
	// system (i.e. a malformed file name, required argument, number out of range,
	// etc.).
	ErrInvalidArgument ErrorCode = "invalid argument"

	// DeadlineExceeded means operation expired before completion. For operations
	// that change the state of the system, this error may be returned even if the
	// operation has completed successfully (timeout).
	ErrDeadlineExceeded ErrorCode = "deadline exceeded"

	// NotFound means some requested entity was not found.
	ErrNotFound ErrorCode = "not found"

	// BadRoute means that the requested URL path wasn't routable to a webrpc
	// service and method. This is returned by the generated server, and usually
	// shouldn't be returned by applications. Instead, applications should use
	// NotFound or Unimplemented.
	ErrBadRoute ErrorCode = "bad route"

	// AlreadyExists means an attempt to create an entity failed because one
	// already exists.
	ErrAlreadyExists ErrorCode = "already exists"

	// PermissionDenied indicates the caller does not have permission to execute
	// the specified operation. It must not be used if the caller cannot be
	// identified (Unauthenticated).
	ErrPermissionDenied ErrorCode = "permission denied"

	// Unauthenticated indicates the request does not have valid authentication
	// credentials for the operation.
	ErrUnauthenticated ErrorCode = "unauthenticated"

	// ResourceExhausted indicates some resource has been exhausted, perhaps a
	// per-user quota, or perhaps the entire file system is out of space.
	ErrResourceExhausted ErrorCode = "resource exhausted"

	// FailedPrecondition indicates operation was rejected because the system is
	// not in a state required for the operation's execution. For example, doing
	// an rmdir operation on a directory that is non-empty, or on a non-directory
	// object, or when having conflicting read-modify-write on the same resource.
	ErrFailedPrecondition ErrorCode = "failed precondition"

	// Aborted indicates the operation was aborted, typically due to a concurrency
	// issue like sequencer check failures, transaction aborts, etc.
	ErrAborted ErrorCode = "aborted"

	// OutOfRange means operation was attempted past the valid range. For example,
	// seeking or reading past end of a paginated collection.
	//
	// Unlike InvalidArgument, this error indicates a problem that may be fixed if
	// the system state changes (i.e. adding more items to the collection).
	//
	// There is a fair bit of overlap between FailedPrecondition and OutOfRange.
	// We recommend using OutOfRange (the more specific error) when it applies so
	// that callers who are iterating through a space can easily look for an
	// OutOfRange error to detect when they are done.
	ErrOutOfRange ErrorCode = "out of range"

	// Unimplemented indicates operation is not implemented or not
	// supported/enabled in this service.
	ErrUnimplemented ErrorCode = "unimplemented"

	// Internal errors. When some invariants expected by the underlying system
	// have been broken. In other words, something bad happened in the library or
	// backend service. Do not confuse with HTTP Internal Server Error; an
	// Internal error could also happen on the client code, i.e. when parsing a
	// server response.
	ErrInternal ErrorCode = "internal"

	// Unavailable indicates the service is currently unavailable. This is a most
	// likely a transient condition and may be corrected by retrying with a
	// backoff.
	ErrUnavailable ErrorCode = "unavailable"

	// DataLoss indicates unrecoverable data loss or corruption.
	ErrDataLoss ErrorCode = "data loss"

	// ErrNone is the zero-value, is considered an empty error and should not be
	// used.
	ErrNone ErrorCode = ""
)

func HTTPStatusFromErrorCode(code ErrorCode) int {
	switch code {
	case ErrCanceled:
		return 408 // RequestTimeout
	case ErrUnknown:
		return 400 // Bad Request
	case ErrFail:
		return 422 // Unprocessable Entity
	case ErrInvalidArgument:
		return 400 // BadRequest
	case ErrDeadlineExceeded:
		return 408 // RequestTimeout
	case ErrNotFound:
		return 404 // Not Found
	case ErrBadRoute:
		return 404 // Not Found
	case ErrAlreadyExists:
		return 409 // Conflict
	case ErrPermissionDenied:
		return 403 // Forbidden
	case ErrUnauthenticated:
		return 401 // Unauthorized
	case ErrResourceExhausted:
		return 403 // Forbidden
	case ErrFailedPrecondition:
		return 412 // Precondition Failed
	case ErrAborted:
		return 409 // Conflict
	case ErrOutOfRange:
		return 400 // Bad Request
	case ErrUnimplemented:
		return 501 // Not Implemented
	case ErrInternal:
		return 500 // Internal Server Error
	case ErrUnavailable:
		return 503 // Service Unavailable
	case ErrDataLoss:
		return 500 // Internal Server Error
	case ErrNone:
		return 200 // OK
	default:
		return 0 // Invalid!
	}
}

func IsErrorCode(err error, code ErrorCode) bool {
	if rpcErr, ok := err.(Error); ok {
		if rpcErr.Code() == code {
			return true
		}
	}
	return false
}

func IsValidErrorCode(code ErrorCode) bool {
	return HTTPStatusFromErrorCode(code) != 0
}

type rpcErr struct {
	code  ErrorCode
	msg   string
	cause error
}

func (e *rpcErr) Code() ErrorCode {
	return e.code
}

func (e *rpcErr) Msg() string {
	return e.msg
}

func (e *rpcErr) Cause() error {
	return e.cause
}

func (e *rpcErr) Error() string {
	if e.cause != nil && e.cause.Error() != "" {
		if e.msg != "" {
			return fmt.Sprintf("webrpc %s error: %s -- %s", e.code, e.cause.Error(), e.msg)
		} else {
			return fmt.Sprintf("webrpc %s error: %s", e.code, e.cause.Error())
		}
	} else {
		return fmt.Sprintf("webrpc %s error: %s", e.code, e.msg)
	}
}

func (e *rpcErr) Payload() ErrorPayload {
	statusCode := HTTPStatusFromErrorCode(e.Code())
	errPayload := ErrorPayload{
		Status: statusCode,
		Code:   string(e.Code()),
		Msg:    e.Msg(),
		Error:  e.Error(),
	}
	if e.Cause() != nil {
		errPayload.Cause = e.Cause().Error()
	}
	return errPayload
}

type contextKey struct {
	name string
}

func (k *contextKey) String() string {
	return "webrpc context value " + k.name
}

var (
	// For Client
	HTTPClientRequestHeadersCtxKey = &contextKey{"HTTPClientRequestHeaders"}

	// For Server
	HTTPResponseWriterCtxKey = &contextKey{"HTTPResponseWriter"}

	HTTPRequestCtxKey = &contextKey{"HTTPRequest"}

	ServiceNameCtxKey = &contextKey{"ServiceName"}

	MethodNameCtxKey = &contextKey{"MethodName"}
)
