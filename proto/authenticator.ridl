webrpc = v1

name = sequence-waas-authenticator
version = v0.1.0


import ../vendor/github.com/0xsequence/go-sequence/intents/intent.ridl
  - IntentName
  - Intent
  - IntentResponseCode
  - IntentResponse
  - Signature
  - IdentityType

struct Version
  - webrpcVersion: string
  - schemaVersion: string
  - schemaHash: string
  - appVersion: string

struct RuntimeStatus
  - healthOK: bool # overall status, true/false
  - startTime: timestamp
  - uptime: uint64
  - ver: string
  - pcr0: string
    + go.field.name = PCR0

struct Chain
    - id: uint64
    - name: string
    - isEnabled: bool

struct Identity
  - type: IdentityType
    + go.field.type = IdentityType
  - issuer: string
    + json = iss
    + go.tag.json = iss,omitempty
  - subject: string
    + json = sub
    + go.tag.json = sub,omitempty
  - email: string
    + go.tag.json = email,omitempty

struct OpenIdProvider
  - issuer: string
    + json = iss
  - audience: []string
    + json = aud

struct AuthEmailConfig
  - enabled: bool

struct AuthGuestConfig
  - enabled: bool

struct AuthPlayfabConfig
  - enabled: bool
  - titleId?: string
    + go.field.name = TitleID
    + go.field.type = string
    + go.tag.json = titleId,omitempty

struct AuthConfig
  - email?: AuthEmailConfig
    + go.field.type = AuthEmailConfig
    + go.tag.json = email,omitempty
  - guest?: AuthGuestConfig
    + go.field.type = AuthGuestConfig
    + go.tag.json = guest,omitempty
  - playfab?: AuthPlayfabConfig
    + go.field.type = AuthPlayfabConfig
    + go.tag.json = playfab,omitempty

struct Tenant
  - projectId: uint64
    + go.field.name = ProjectID
  - version: int
  - oidcProviders: []OpenIdProvider
    + go.field.name = OIDCProviders
  - allowedOrigins: []string
    + go.field.type = validation.Origins
    + go.type.import = github.com/goware/validation
  - authConfig: AuthConfig
  - updatedAt: timestamp

struct TenantData
  - projectId: uint64
    + go.field.name = ProjectID
    + json = projectId
  - privateKey: string
    + json = privateKey
  - parentAddress: string
    + json = parentAddress
    + go.field.type = common.Address
    + go.type.import = github.com/0xsequence/ethkit/go-ethereum/common
  - userSalt: string
    + json = userSalt
    + go.field.type = hexutil.Bytes
    + go.type.import = github.com/0xsequence/ethkit/go-ethereum/common/hexutil
  - sequenceContext: MiniSequenceContext
    + json = sequenceContext
  - upgradeCode: string
    + json = upgradeCode
  - waasAccessToken: string
    + json = waasAccessToken
  - authConfig: AuthConfig
    + json = authConfig
    + go.field.type = AuthConfig
  - oidcProviders: []OpenIdProvider
    + go.field.name = OIDCProviders
    + json = oidcProviders
  - kmsKeys: []string
    + go.field.name = KMSKeys
    + json = kmsKeys
  - allowedOrigins: []string
    + json = allowedOrigins
    + go.field.type = validation.Origins
    + go.type.import = github.com/goware/validation

struct MiniSequenceContext
  - factory: string
  - mainModule: string

struct AccountData
  - projectId: uint64
    + go.field.name = ProjectID
    + json = projectId
  - userId: string
    + go.field.name = UserID
    + json = userId
  - identity: string
    + json = identity
  - createdAt: timestamp
    + json = createdAt

struct Session
  - id: string
    + go.field.name = ID
  - projectId: uint64
    + go.field.name = ProjectID
  - userId: string
    + go.field.name = UserID
  - identity: Identity
    + go.field.type = Identity
  - friendlyName: string
  - createdAt: timestamp
  - refreshedAt: timestamp
  - expiresAt: timestamp

struct SessionData
  - id: string
    + go.field.name = ID
  - projectId: uint64
    + go.field.name = ProjectID
    + json = projectId
  - userId: string
    + go.field.name = UserID
    + json = userId
  - identity: string
    + json = identity
  - createdAt: timestamp
    + json = createdAt
  - expiresAt: timestamp
    + json = expiresAt

struct VerificationContext
  - projectId: uint64
    + go.field.name = ProjectID
  - sessionId: string
    + go.field.name = SessionID
  - identityType: IdentityType
  - verifier: string
  - challenge?: string
  - answer?: string
  - attempts: int
  - lastAttemptAt?: timestamp
  - expiresAt: timestamp


##
## Errors
##

error 1000 Unauthorized "Unauthorized access" HTTP 401
error 1001 TenantNotFound "Tenant not found" HTTP 404

error 2000 EmailAlreadyInUse "Could not create account as the email is already in use" HTTP 409


##
## Services
##

service WaasAuthenticator
    - RegisterSession(intent: Intent, friendlyName: string) => (session: Session, response: IntentResponse)
    - SendIntent(intent: Intent) => (response: IntentResponse)
    - ChainList() => (chains: []Chain)

service WaasAuthenticatorAdmin
    - Version() => (version: Version)
    - RuntimeStatus() => (status: RuntimeStatus)
    - Clock() => (serverTime: timestamp)

    - GetTenant(projectId: uint64) => (tenant: Tenant)
    - CreateTenant(projectId: uint64, waasAccessToken: string, authConfig: AuthConfig, oidcProviders: []OpenIdProvider, allowedOrigins: []string, password?: string) => (tenant: Tenant, upgradeCode: string)
    - UpdateTenant(projectId: uint64, upgradeCode: string, authConfig: AuthConfig, oidcProviders: []OpenIdProvider, allowedOrigins: []string) => (tenant: Tenant)
