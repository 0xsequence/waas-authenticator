webrpc = v1

name = sequence-waas-authenticator
version = v0.1.0


import ./intent.ridl
  - Intent
  - IntentResponse
  - Signature

struct Version
  - webrpcVersion: string
  - schemaVersion: string
  - schemaHash: string
  - appVersion: string

struct RuntimeStatus
  - healthOK: bool # overall status, true/false
  - startTime: timestamp
  - uptime: uint64
  - ver: string
  - pcr0: string
    + go.field.name = PCR0

struct Chain
    - id: uint64
    - name: string
    - isEnabled: bool

struct Identity
  - type: IdentityType
    + go.field.type = IdentityType
  - issuer: string
    + json = iss
  - subject: string
    + json = sub
  - email: string
    + go.tag.json = email,omitempty

struct OpenIdProvider
  - issuer: string
    + json = iss
  - audience: []string
    + json = aud

struct Tenant
  - projectId: uint64
    + go.field.name = ProjectID
  - version: int
  - oidcProviders: []OpenIdProvider
    + go.field.name = OIDCProviders
  - allowedOrigins: []string
    + go.field.type = validation.Origins
    + go.type.import = github.com/goware/validation
  - updatedAt: timestamp

struct TenantData
  - projectId: uint64
    + go.field.name = ProjectID
    + json = projectId
  - privateKey: string
    + json = privateKey
  - parentAddress: string
    + json = parentAddress
    + go.field.type = common.Address
    + go.type.import = github.com/0xsequence/ethkit/go-ethereum/common
  - userSalt: string
    + json = userSalt
    + go.field.type = hexutil.Bytes
    + go.type.import = github.com/0xsequence/ethkit/go-ethereum/common/hexutil
  - sequenceContext: MiniSequenceContext
    + json = sequenceContext
  - upgradeCode: string
    + json = upgradeCode
  - waasAccessToken: string
    + json = waasAccessToken
  - oidcProviders: []OpenIdProvider
    + go.field.name = OIDCProviders
    + json = oidcProviders
  - kmsKeys: []string
    + go.field.name = KMSKeys
    + json = kmsKeys
  - allowedOrigins: []string
    + json = allowedOrigins
    + go.field.type = validation.Origins
    + go.type.import = github.com/goware/validation

struct MiniSequenceContext
  - factory: string
  - mainModule: string

enum IdentityType: uint8
  - None
  - Guest
  - OIDC

struct AccountData
  - projectId: uint64
    + go.field.name = ProjectID
    + json = projectId
  - userId: string
    + go.field.name = UserID
    + json = userId
  - identity: string
    + json = identity
  - createdAt: timestamp
    + json = createdAt

struct Session
  - id: string
    + go.field.name = ID
  - projectId: uint64
    + go.field.name = ProjectID
  - userId: string
    + go.field.name = UserID
  - identity: Identity
    + go.field.type = Identity
  - friendlyName: string
  - createdAt: timestamp
  - refreshedAt: timestamp
  - expiresAt: timestamp

struct SessionData
  - id: string
    + go.field.name = ID
  - projectId: uint64
    + go.field.name = ProjectID
    + json = projectId
  - userId: string
    + go.field.name = UserID
    + json = userId
  - identity: string
    + json = identity
  - createdAt: timestamp
    + json = createdAt
  - expiresAt: timestamp
    + json = expiresAt


##
## Errors
##

error 1000 Unauthorized "Unauthorized access" HTTP 401
error 1001 TenantNotFound "Tenant not found" HTTP 404


##
## Services
##

service WaasAuthenticator
    - RegisterSession(intent: Intent, friendlyName: string) => (session: Session, response: IntentResponse)
    - SendIntent(intent: Intent) => (response: IntentResponse)
    - ChainList() => (chains: []Chain)

service WaasAuthenticatorAdmin
    - Version() => (version: Version)
    - RuntimeStatus() => (status: RuntimeStatus)
    - Clock() => (serverTime: timestamp)

    - GetTenant(projectId: uint64) => (tenant: Tenant)
    - CreateTenant(projectId: uint64, waasAccessToken: string, oidcProviders: []OpenIdProvider, allowedOrigins: []string) => (tenant: Tenant, upgradeCode: string)
    - UpdateTenant(projectId: uint64, upgradeCode: string, oidcProviders: []OpenIdProvider, allowedOrigins: []string) => (tenant: Tenant)
