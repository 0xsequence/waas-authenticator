webrpc = v1

name = sequence-waas-authenticator
version = v0.1.0


struct Version
  - webrpcVersion: string
  - schemaVersion: string
  - schemaHash: string
  - appVersion: string

struct RuntimeStatus
  - healthOK: bool # overall status, true/false
  - startTime: timestamp
  - uptime: uint64
  - ver: string
  - branch: string
  - commitHash: string

struct RegisterSessionPayload
  - projectId: uint64
    + go.field.name = ProjectID
  - idToken: string
    + go.field.name = IDToken
  - sessionAddress: string
  - friendlyName: string
  - intentJSON: string
    + go.field.name = IntentJSON

struct RefreshSessionPayload
  - sessionId: string
    + go.field.name = SessionID

struct DropSessionPayload
  - sessionId: string
    + go.field.name = SessionID
  - dropSessionId: string
    + go.field.name = DropSessionID

struct ListSessionsPayload
  - sessionId: string
    + go.field.name = SessionID

struct GetAddressPayload
  - sessionId: string
    + go.field.name = SessionID

struct SendIntentPayload
  - sessionId: string
    + go.field.name = SessionID
  - intentJson: string
    + go.field.name = IntentJSON

struct Chain
    - id: uint64
    - name: string
    - isEnabled: bool

struct Identity
  - type: IdentityType
    + go.field.type = IdentityType
  - issuer: string
    + json = iss
  - subject: string
    + json = sub
  - email: string
    + go.tag.json = email,omitempty

struct OpenIdProvider
  - issuer: string
    + json = iss
  - authorizedParty?: string
    + json = azp
  - audience?: string
    + json = aud

struct Tenant
  - projectId: uint64
    + go.field.name = ProjectID
  - version: int
  - oidcProviders: []OpenIdProvider
    + go.field.name = OIDCProviders
  - allowedOrigins: []string
  - updatedAt: timestamp

struct TenantData
  - projectId: uint64
    + go.field.name = ProjectID
    + json = proj
  - privateKey: string
    + json = prv
  - parentAddress: string
    + json = addr
    + go.field.type = common.Address
    + go.type.import = github.com/0xsequence/ethkit/go-ethereum/common
  - userSalt: string
    + json = salt
    + go.field.type = hexutil.Bytes
    + go.type.import = github.com/0xsequence/ethkit/go-ethereum/common/hexutil
  - sequenceContext: MiniSequenceContext
    + json = seqctx
  - upgradeCode: string
    + json = upc
  - waasAccessToken: string
    + json = wat
  - oidcProviders: []OpenIdProvider
    + go.field.name = OIDCProviders
    + json = oidc
  - transportKeys: []string
    + json = transk
  - sessionKeys: []string
    + json = sessk
  - allowedOrigins: []string
    + json = ogns

struct MiniSequenceContext
  - factory: string
  - mainModule: string

enum IdentityType: uint8
  - None
  - Guest
  - OIDC

struct AccountData
  - projectId: uint64
    + go.field.name = ProjectID
    + json = proj
  - userId: string
    + go.field.name = UserID
    + json = user
  - identity: string
    + json = ident
  - createdAt: timestamp
    + json = iat

struct Session
  - id: string
    + go.field.name = ID
  - address: string
    + go.field.type = common.Address
    + go.type.import = github.com/0xsequence/ethkit/go-ethereum/common
  - projectId: uint64
    + go.field.name = ProjectID
  - userId: string
    + go.field.name = UserID
  - identity: Identity
    + go.field.type = Identity
  - friendlyName: string
  - createdAt: timestamp
  - refreshedAt: timestamp
  - expiresAt: timestamp

struct SessionData
  - address: string
    + json = addr
    + go.field.type = common.Address
    + go.type.import = github.com/0xsequence/ethkit/go-ethereum/common
  - projectId: uint64
    + go.field.name = ProjectID
    + json = proj
  - userId: string
    + go.field.name = UserID
    + json = user
  - identity: string
    + json = ident
  - createdAt: timestamp
    + json = iat
  - expiresAt: timestamp
    + json = exp


##
## Errors
##

error 1000 Unauthorized "Unauthorized access" HTTP 401


##
## Services
##

service WaasAuthenticator
    - RegisterSession(encryptedPayloadKey: string, payloadCiphertext: string, payloadSig: string) => (session: Session, data: any)
    - ListSessions(encryptedPayloadKey: string, payloadCiphertext: string, payloadSig: string) => (sessions: []Session)
    - DropSession(encryptedPayloadKey: string, payloadCiphertext: string, payloadSig: string) => (ok: bool)

    - GetAddress(encryptedPayloadKey: string, payloadCiphertext: string, payloadSig: string) => (address: string)
    - SendIntent(encryptedPayloadKey: string, payloadCiphertext: string, payloadSig: string) => (code: string, data: any)

    - ChainList() => (chains: []Chain)

service WaasAuthenticatorAdmin
    - Version() => (version: Version)
    - RuntimeStatus() => (status: RuntimeStatus)
    - Clock() => (serverTime: timestamp)

    - GetTenant(projectId: uint64) => (tenant: Tenant)
    - CreateTenant(projectId: uint64, waasAccessToken: string, oidcProviders: []OpenIdProvider, allowedOrigins: []string) => (tenant: Tenant, upgradeCode: string)
    - UpdateTenant(projectId: uint64, upgradeCode: string, oidcProviders: []OpenIdProvider, allowedOrigins: []string) => (tenant: Tenant)
